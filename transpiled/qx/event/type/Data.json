{
  "className": "qx.event.type.Data",
  "packageName": "qx.event.type",
  "name": "Data",
  "superClass": "qx.event.type.Event",
  "interfaces": [],
  "mixins": [],
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 107,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Event object for data holding event or data changes."
        }
      ]
    }
  },
  "type": "class",
  "members": {
    "__data": {
      "location": {
        "start": {
          "line": 38,
          "column": 4
        },
        "end": {
          "line": 38,
          "column": 17
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__old": {
      "location": {
        "start": {
          "line": 39,
          "column": 4
        },
        "end": {
          "line": 39,
          "column": 16
        }
      },
      "type": "variable",
      "access": "private"
    },
    "init": {
      "location": {
        "start": {
          "line": 55,
          "column": 4
        },
        "end": {
          "line": 63,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Initializes an event object."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "data {var} The event's new data",
            "paramName": "data",
            "description": " The event's new data",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var?null} The event's old data (optional)",
            "paramName": "old",
            "description": " The event's old data (optional)",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\naction prevented. The default action can either be the browser's\ndefault action of a native event (e.g. open the context menu on a\nright click) or the default action of a qooxdoo class (e.g. close\nthe window widget). The default action can be prevented by calling\n{@link qx.event.type.Event#preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\naction prevented. The default action can either be the browser's\ndefault action of a native event (e.g. open the context menu on a\nright click) or the default action of a qooxdoo class (e.g. close\nthe window widget). The default action can be prevented by calling\n{@link qx.event.type.Event#preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Data} the initialized instance.",
            "type": "qx.event.type.Data",
            "desc": " the initialized instance."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event"
      ]
    },
    "clone": {
      "location": {
        "start": {
          "line": 75,
          "column": 4
        },
        "end": {
          "line": 83,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get a copy of this object"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "embryo {qx.event.type.Data?null} Optional event class, which will\nbe configured using the data of this event instance. The event must be\nan instance of this event class. If the data is <code>null</code>,\na new pooled instance is created.",
            "paramName": "embryo",
            "description": " Optional event class, which will\nbe configured using the data of this event instance. The event must be\nan instance of this event class. If the data is <code>null</code>,\na new pooled instance is created.",
            "optional": true,
            "defaultValue": "null",
            "type": "qx.event.type.Data"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Data} a copy of this object",
            "type": "qx.event.type.Data",
            "desc": " a copy of this object"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event",
        "qx.core.Object"
      ]
    },
    "getData": {
      "location": {
        "start": {
          "line": 92,
          "column": 4
        },
        "end": {
          "line": 94,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The new data of the event sending this data event.\nThe return data type is the same as the event data type."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The new data of the event",
            "type": "var",
            "desc": " The new data of the event"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getOldData": {
      "location": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The old data of the event sending this data event.\nThe return data type is the same as the event data type."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The old data of the event",
            "type": "var",
            "desc": " The old data of the event"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}