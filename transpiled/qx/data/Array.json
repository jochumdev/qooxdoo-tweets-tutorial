{
  "className": "qx.data.Array",
  "packageName": "qx.data",
  "name": "Array",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.data.IListData"
  ],
  "mixins": [
    "qx.data.marshal.MEventBubbling"
  ],
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0
      },
      "end": {
        "line": 1134,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nMartin Wittemann (martinwittemann)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The data array is a special array used in the data binding context of\nqooxdoo. It does not extend the native array of JavaScript but its a wrapper\nfor it. All the native methods are included in the implementation and it\nalso fires events if the content or the length of the array changes in\nany way. Also the <code>.length</code> property is available on the array.\n\nThis class does not need to be disposed, unless you set the autoDisposeItems\nproperty to true and want the items to be disposed."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 47,
        "column": 2
      },
      "end": {
        "line": 88,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "Creates a new instance of an array."
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "param {var} The parameter can be some types.<br/>\nWithout a parameter a new blank array will be created.<br/>\nIf there is more than one parameter is given, the parameter will be\nadded directly to the new array.<br/>\nIf the parameter is a number, a new Array with the given length will be\ncreated.<br/>\nIf the parameter is a JavaScript array, a new array containing the given\nelements will be created.",
          "paramName": "param",
          "description": " The parameter can be some types.<br/>\nWithout a parameter a new blank array will be created.<br/>\nIf there is more than one parameter is given, the parameter will be\nadded directly to the new array.<br/>\nIf the parameter is a number, a new Array with the given length will be\ncreated.<br/>\nIf the parameter is a JavaScript array, a new array containing the given\nelements will be created.",
          "type": "var"
        }
      ]
    }
  },
  "properties": {
    "autoDisposeItems": {
      "location": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 106,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Flag to set the dispose behavior of the array. If the property is set to\n<code>true</code>, the array will dispose its content on dispose, too."
          }
        ]
      },
      "name": "autoDisposeItems",
      "propertyType": "new",
      "check": "Boolean",
      "defaultValue": false
    }
  },
  "members": {
    "__array": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "private members"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "concat": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 161,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Concatenates the current and the given array into a new one."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {qx.data.Array|Array} The javaScript array which should be concatenated\nto the current array.",
            "paramName": "array",
            "description": " The javaScript array which should be concatenated\nto the current array.",
            "type": [
              "qx.data.Array",
              "Array"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array containing the values of both former\narrays.",
            "type": "qx.data.Array",
            "desc": " A new array containing the values of both former\narrays."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "join": {
      "location": {
        "start": {
          "line": 173,
          "column": 4
        },
        "end": {
          "line": 175,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the array as a string using the given connector string to\nconnect the values."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "connector {String} the string which should be used to past in\nbetween of the array values.",
            "paramName": "connector",
            "description": " the string which should be used to past in\nbetween of the array values.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The array as a string.",
            "type": "String",
            "desc": " The array as a string."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "pop": {
      "location": {
        "start": {
          "line": 184,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes and returns the last element of the array.\nAn change event will be fired."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The last element of the array.",
            "type": "var",
            "desc": " The last element of the array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "push": {
      "location": {
        "start": {
          "line": 218,
          "column": 4
        },
        "end": {
          "line": 245,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds an element at the end of the array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} Multiple elements. Every element will be added to\nthe end of the array. An change event will be fired.",
            "paramName": "varargs",
            "description": " Multiple elements. Every element will be added to\nthe end of the array. An change event will be fired.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The new length of the array.",
            "type": "Number",
            "desc": " The new length of the array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reverse": {
      "location": {
        "start": {
          "line": 251,
          "column": 4
        },
        "end": {
          "line": 273,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Reverses the order of the array. An change event will be fired."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "shift": {
      "location": {
        "start": {
          "line": 282,
          "column": 4
        },
        "end": {
          "line": 314,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the first element of the array and returns it. An change event\nwill be fired."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the former first element.",
            "type": "var",
            "desc": " the former first element."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "slice": {
      "location": {
        "start": {
          "line": 327,
          "column": 4
        },
        "end": {
          "line": 329,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a new array based on the range specified by the parameters."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "from {Number} The start index.",
            "paramName": "from",
            "description": " The start index.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "to {Number?null} The zero-based end index. <code>slice</code> extracts\nup to but not including <code>to</code>. If omitted, slice extracts to the\nend of the array.",
            "paramName": "to",
            "description": " The zero-based end index. <code>slice</code> extracts\nup to but not including <code>to</code>. If omitted, slice extracts to the\nend of the array.",
            "optional": true,
            "defaultValue": "null",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array containing the given range of values.",
            "type": "qx.data.Array",
            "desc": " A new array containing the given range of values."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "splice": {
      "location": {
        "start": {
          "line": 345,
          "column": 4
        },
        "end": {
          "line": 428,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Method to remove and add new elements to the array. A change event\nwill be fired for every removal or addition unless the array is\nidentical before and after splicing."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "startIndex {Integer} The index where the splice should start",
            "paramName": "startIndex",
            "description": " The index where the splice should start",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "amount {Integer} Defines number of elements which will be removed\nat the given position.",
            "paramName": "amount",
            "description": " Defines number of elements which will be removed\nat the given position.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {var} All following parameters will be added at the given\nposition to the array.",
            "paramName": "varargs",
            "description": " All following parameters will be added at the given\nposition to the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} An data array containing the removed elements.\nKeep in to dispose this one, even if you don't use it!",
            "type": "qx.data.Array",
            "desc": " An data array containing the removed elements.\nKeep in to dispose this one, even if you don't use it!"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "replace": {
      "location": {
        "start": {
          "line": 438,
          "column": 4
        },
        "end": {
          "line": 448,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Efficiently replaces the array with the contents of src; this will suppress the\nchange event if the array contents are the same, and will make sure that only\none change event is fired"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "src {qx.data.Array|Array} the new value to set the array to",
            "paramName": "src",
            "description": " the new value to set the array to",
            "type": [
              "qx.data.Array",
              "Array"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sort": {
      "location": {
        "start": {
          "line": 459,
          "column": 4
        },
        "end": {
          "line": 486,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sorts the array. If a function is given, this will be used to\ncompare the items. <code>changeBubble</code> event will only be fired,\nif sorting result differs from original array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "func {Function} A compare function comparing two parameters and\nshould return a number.",
            "paramName": "func",
            "description": " A compare function comparing two parameters and\nshould return a number.",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "unshift": {
      "location": {
        "start": {
          "line": 496,
          "column": 4
        },
        "end": {
          "line": 523,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds the given items to the beginning of the array. For every element,\na change event will be fired."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} As many elements as you want to add to the beginning.",
            "paramName": "varargs",
            "description": " As many elements as you want to add to the beginning.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The new length of the array",
            "type": "Integer",
            "desc": " The new length of the array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toArray": {
      "location": {
        "start": {
          "line": 534,
          "column": 4
        },
        "end": {
          "line": 536,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the list data as native array. Beware of the fact that the\ninternal representation will be returned and any manipulation of that\ncan cause a misbehavior of the array. This method should only be used for\ndebugging purposes."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The native array.",
            "type": "qx.data.Array",
            "desc": " The native array."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "getItem": {
      "location": {
        "start": {
          "line": 547,
          "column": 4
        },
        "end": {
          "line": 549,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Replacement function for the getting of the array value.\narray[0] should be array.getItem(0)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index requested of the array element.",
            "paramName": "index",
            "description": " The index requested of the array element.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The element at the given index.",
            "type": "var",
            "desc": " The element at the given index."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "setItem": {
      "location": {
        "start": {
          "line": 561,
          "column": 4
        },
        "end": {
          "line": 593,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Replacement function for the setting of an array value.\narray[0] = \"a\" should be array.setItem(0, \"a\").\nA change event will be fired if the value changes. Setting the same\nvalue again will not lead to a change event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index of the array element.",
            "paramName": "index",
            "description": " The index of the array element.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "item {var} The new item to set.",
            "paramName": "item",
            "description": " The new item to set.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "getLength": {
      "location": {
        "start": {
          "line": 602,
          "column": 4
        },
        "end": {
          "line": 604,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This method returns the current length stored under .length on each\narray."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The current length of the array.",
            "type": "Number",
            "desc": " The current length of the array."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "indexOf": {
      "location": {
        "start": {
          "line": 614,
          "column": 4
        },
        "end": {
          "line": 616,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the index of the item in the array. If the item is not in the\narray, -1 will be returned."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item of which the index should be returned.",
            "paramName": "item",
            "description": " The item of which the index should be returned.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The Index of the given item.",
            "type": "Number",
            "desc": " The Index of the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "lastIndexOf": {
      "location": {
        "start": {
          "line": 625,
          "column": 4
        },
        "end": {
          "line": 627,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the last index of the item in the array. If the item is not in the\narray, -1 will be returned."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item of which the index should be returned.",
            "paramName": "item",
            "description": " The item of which the index should be returned.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The Index of the given item.",
            "type": "Number",
            "desc": " The Index of the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "contains": {
      "location": {
        "start": {
          "line": 655,
          "column": 4
        },
        "end": {
          "line": 657,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nIMPLEMENTATION OF THE QX.LANG.ARRAY METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Check if the given item is in the current array."
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} Please use the include method instead"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item which is possibly in the array.",
            "paramName": "item",
            "description": " The item which is possibly in the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the array contains the given item.",
            "type": "Boolean",
            "desc": " true, if the array contains the given item."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "includes": {
      "location": {
        "start": {
          "line": 665,
          "column": 4
        },
        "end": {
          "line": 667,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Check if the given item is in the current array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item which is possibly in the array.",
            "paramName": "item",
            "description": " The item which is possibly in the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the array contains the given item.",
            "type": "Boolean",
            "desc": " true, if the array contains the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "copy": {
      "location": {
        "start": {
          "line": 675,
          "column": 4
        },
        "end": {
          "line": 677,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Return a copy of the given arr"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} copy of this",
            "type": "qx.data.Array",
            "desc": " copy of this"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertAt": {
      "location": {
        "start": {
          "line": 686,
          "column": 4
        },
        "end": {
          "line": 689,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Insert an element at a given position."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Position where to insert the item.",
            "paramName": "index",
            "description": " Position where to insert the item.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "item {var} The element to insert.",
            "paramName": "item",
            "description": " The element to insert.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertBefore": {
      "location": {
        "start": {
          "line": 698,
          "column": 4
        },
        "end": {
          "line": 707,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Insert an item into the array before a given item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "before {var} Insert item before this object.",
            "paramName": "before",
            "description": " Insert item before this object.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "item {var} The item to be inserted.",
            "paramName": "item",
            "description": " The item to be inserted.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertAfter": {
      "location": {
        "start": {
          "line": 716,
          "column": 4
        },
        "end": {
          "line": 725,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Insert an element into the array after a given item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "after {var} Insert item after this object.",
            "paramName": "after",
            "description": " Insert item after this object.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "item {var} Object to be inserted.",
            "paramName": "item",
            "description": " Object to be inserted.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAt": {
      "location": {
        "start": {
          "line": 734,
          "column": 4
        },
        "end": {
          "line": 739,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove an element from the array at the given index."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the item to be removed.",
            "paramName": "index",
            "description": " Index of the item to be removed.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The removed item.",
            "type": "var",
            "desc": " The removed item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAll": {
      "location": {
        "start": {
          "line": 747,
          "column": 4
        },
        "end": {
          "line": 785,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove all elements from the array."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} A native array containing the removed elements.",
            "type": "qx.data.Array",
            "desc": " A native array containing the removed elements."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "append": {
      "location": {
        "start": {
          "line": 795,
          "column": 4
        },
        "end": {
          "line": 839,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Append the items of the given array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {Array|qx.data.IListData} The items of this array will\nbe appended.",
            "paramName": "array",
            "description": " The items of this array will\nbe appended.",
            "type": [
              "Array",
              "qx.data.IListData"
            ]
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the argument is not an array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "exclude": {
      "location": {
        "start": {
          "line": 847,
          "column": 4
        },
        "end": {
          "line": 853,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes all elements which are listed in the array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {Array} the elements of this array will be excluded from this one",
            "paramName": "array",
            "description": " the elements of this array will be excluded from this one",
            "type": "qx.data.Array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 862,
          "column": 4
        },
        "end": {
          "line": 871,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the given item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} Item to be removed from the array.",
            "paramName": "item",
            "description": " Item to be removed from the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The removed item.",
            "type": "var",
            "desc": " The removed item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "equals": {
      "location": {
        "start": {
          "line": 881,
          "column": 4
        },
        "end": {
          "line": 896,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Check whether the given array has the same content as this.\nChecks only the equality of the arrays' content."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {qx.data.Array} The array to check.",
            "paramName": "array",
            "description": " The array to check.",
            "type": "qx.data.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the two arrays are equal.",
            "type": "Boolean",
            "desc": " Whether the two arrays are equal."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sum": {
      "location": {
        "start": {
          "line": 905,
          "column": 4
        },
        "end": {
          "line": 913,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the sum of all values in the array. Supports\nnumeric values only."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The sum of all values.",
            "type": "Number",
            "desc": " The sum of all values."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "max": {
      "location": {
        "start": {
          "line": 923,
          "column": 4
        },
        "end": {
          "line": 935,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the highest value in the given array.\nSupports numeric values only."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number | null} The highest of all values or undefined if the\narray is empty.",
            "type": "Number | null",
            "desc": " The highest of all values or undefined if the\narray is empty."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "min": {
      "location": {
        "start": {
          "line": 945,
          "column": 4
        },
        "end": {
          "line": 957,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the lowest value in the array. Supports\nnumeric values only."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number | null} The lowest of all values or undefined\nif the array is empty.",
            "type": "Number | null",
            "desc": " The lowest of all values or undefined\nif the array is empty."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "forEach": {
      "location": {
        "start": {
          "line": 968,
          "column": 4
        },
        "end": {
          "line": 973,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Invokes the given function for every item in the array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The function which will be call for every\nitem in the array. It will be invoked with three parameters:\nthe item, the index and the array itself.",
            "paramName": "callback",
            "description": " The function which will be call for every\nitem in the array. It will be invoked with three parameters:\nthe item, the index and the array itself.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {var} The context in which the callback will be invoked.",
            "paramName": "context",
            "description": " The context in which the callback will be invoked.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "filter": {
      "location": {
        "start": {
          "line": 994,
          "column": 4
        },
        "end": {
          "line": 996,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nAdditional JS1.6 methods\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Creates a new array with all elements that pass the test implemented by\nthe provided function. It returns a new data array instance so make sure\nto think about disposing it."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array instance containing only the items\nwhich passed the test.",
            "type": "qx.data.Array",
            "desc": " A new array instance containing only the items\nwhich passed the test."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "map": {
      "location": {
        "start": {
          "line": 1011,
          "column": 4
        },
        "end": {
          "line": 1013,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates a new array with the results of calling a provided function on every\nelement in this array. It returns a new data array instance so make sure\nto think about disposing it."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The mapping function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The mapping function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array instance containing the new created items.",
            "type": "qx.data.Array",
            "desc": " A new array instance containing the new created items."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "some": {
      "location": {
        "start": {
          "line": 1027,
          "column": 4
        },
        "end": {
          "line": 1029,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Tests whether any element in the array passes the test implemented by the\nprovided function."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if any element passed the test function.",
            "type": "Boolean",
            "desc": " <code>true</code>, if any element passed the test function."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "every": {
      "location": {
        "start": {
          "line": 1043,
          "column": 4
        },
        "end": {
          "line": 1045,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Tests whether every element in the array passes the test implemented by the\nprovided function."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if every element passed the test function.",
            "type": "Boolean",
            "desc": " <code>true</code>, if every element passed the test function."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reduce": {
      "location": {
        "start": {
          "line": 1061,
          "column": 4
        },
        "end": {
          "line": 1063,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Apply a function against an accumulator and each value of the array\n(from left-to-right) as to reduce it to a single value."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The accumulator function, which will be\nexecuted for every item in the array. The function will have four arguments.\n<li><code>previousItem</code>: the previous item</li>\n<li><code>currentItem</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The accumulator function, which will be\nexecuted for every item in the array. The function will have four arguments.\n<li><code>previousItem</code>: the previous item</li>\n<li><code>currentItem</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "initValue {var?undefined} Object to use as the first argument to the first\ncall of the callback.",
            "paramName": "initValue",
            "description": " Object to use as the first argument to the first\ncall of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The returned value of the last accumulator call.",
            "type": "var",
            "desc": " The returned value of the last accumulator call."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reduceRight": {
      "location": {
        "start": {
          "line": 1079,
          "column": 4
        },
        "end": {
          "line": 1081,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Apply a function against an accumulator and each value of the array\n(from right-to-left) as to reduce it to a single value."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The accumulator function, which will be\nexecuted for every item in the array. The function will have four arguments.\n<li><code>previousItem</code>: the previous item</li>\n<li><code>currentItem</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The accumulator function, which will be\nexecuted for every item in the array. The function will have four arguments.\n<li><code>previousItem</code>: the previous item</li>\n<li><code>currentItem</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "initValue {var?undefined} Object to use as the first argument to the first\ncall of the callback.",
            "paramName": "initValue",
            "description": " Object to use as the first argument to the first\ncall of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The returned value of the last accumulator call.",
            "type": "var",
            "desc": " The returned value of the last accumulator call."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__updateLength": {
      "location": {
        "start": {
          "line": 1094,
          "column": 4
        },
        "end": {
          "line": 1098,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nINTERNAL HELPERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Internal function which updates the length property of the array.\nEvery time the length will be updated, a {@link #changeLength} data\nevent will be fired."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__updateEventPropagation": {
      "location": {
        "start": {
          "line": 1106,
          "column": 4
        },
        "end": {
          "line": 1110,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper to update the event propagation for a range of items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "from {Number} Start index.",
            "paramName": "from",
            "description": " Start index.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "to {Number} End index.",
            "paramName": "to",
            "description": " End index.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyEventPropagation": {
      "type": "function",
      "name": "_applyEventPropagation",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Apply function for every property created with the\n{@link qx.data.marshal.Json} marshaler. It fires and\n{@link #changeBubble} event on every change. It also adds the chaining\nlistener if possible which is necessary for the bubbling of the events."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The new value of the property.",
            "paramName": "value",
            "description": " The new value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value of the property.",
            "paramName": "old",
            "description": " The old value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the changed property.",
            "paramName": "name",
            "description": " The name of the changed property.",
            "type": "String"
          }
        ]
      }
    },
    "_registerEventChaining": {
      "type": "function",
      "name": "_registerEventChaining",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Registers for the given parameters the changeBubble listener, if\npossible. It also removes the old listener, if an old item with\na changeBubble event is given."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The new value of the property.",
            "paramName": "value",
            "description": " The new value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value of the property.",
            "paramName": "old",
            "description": " The old value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the changed property.",
            "paramName": "name",
            "description": " The name of the changed property.",
            "type": "String"
          }
        ]
      }
    },
    "__changePropertyListener": {
      "type": "function",
      "name": "__changePropertyListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener responsible for formating the name and firing the change event\nfor the changed property."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the former properties.",
            "paramName": "name",
            "description": " The name of the former properties.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The date event fired by the property\nchange.",
            "paramName": "e",
            "description": " The date event fired by the property\nchange.",
            "type": "qx.event.type.Data"
          }
        ]
      }
    },
    "bind": {
      "type": "function",
      "name": "bind",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The bind method delegates the call to the\n{@link qx.data.SingleValueBinding#bind} function. As source, the current\nobject (this) will be used."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourcePropertyChain {String} The property chain which represents\nthe source property.",
            "paramName": "sourcePropertyChain",
            "description": " The property chain which represents\nthe source property.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which the source should\nbe bind to.",
            "paramName": "targetObject",
            "description": " The object which the source should\nbe bind to.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The property name of the target object.",
            "paramName": "targetProperty",
            "description": " The property name of the target object.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "options {Map} A map containing the options. See\n{@link qx.data.SingleValueBinding#bind} for more\ninformation.",
            "paramName": "options",
            "description": " A map containing the options. See\n{@link qx.data.SingleValueBinding#bind} for more\ninformation.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Returns the internal id for that binding. This can be used\nfor referencing the binding e.g. for removing. This is not an atomic\nid so you can't you use it as a hash-map index.",
            "type": "var",
            "desc": " Returns the internal id for that binding. This can be used\nfor referencing the binding e.g. for removing. This is not an atomic\nid so you can't you use it as a hash-map index."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the event is no data event or\nthere is no property definition for object and property (source and\ntarget)."
          }
        ]
      }
    },
    "removeBinding": {
      "type": "function",
      "name": "removeBinding",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the binding with the given id from the current object. The\nid has to be the id returned by any of the bind functions."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {var} The id of the binding.",
            "paramName": "id",
            "description": " The id of the binding.",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the binding could not be found."
          }
        ]
      }
    },
    "removeRelatedBindings": {
      "type": "function",
      "name": "removeRelatedBindings",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes all bindings between the object and the related one."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "relatedObject {qx.core.Object} The object of which related\nbindings should be removed.",
            "paramName": "relatedObject",
            "description": " The object of which related\nbindings should be removed.",
            "type": "qx.core.Object"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If one of the bindings listed internally can not be\nremoved."
          }
        ]
      }
    },
    "removeAllBindings": {
      "type": "function",
      "name": "removeAllBindings",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding"
    },
    "getBindings": {
      "type": "function",
      "name": "getBindings",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.MBinding",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns an array which lists all bindings for the object."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of binding informations. Every binding\ninformation is an array itself containing id, sourceObject, sourceEvent,\ntargetObject and targetProperty in that order.",
            "type": "qx.data.Array",
            "desc": " An array of binding informations. Every binding\ninformation is an array itself containing id, sourceObject, sourceEvent,\ntargetObject and targetProperty in that order."
          }
        ]
      }
    },
    "debug": {
      "type": "function",
      "name": "debug",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Logs a debug message."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "type": "var"
          }
        ]
      }
    },
    "info": {
      "type": "function",
      "name": "info",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Logs an info message."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "type": "var"
          }
        ]
      }
    },
    "warn": {
      "type": "function",
      "name": "warn",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Logs a warning message."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "type": "var"
          }
        ]
      }
    },
    "error": {
      "type": "function",
      "name": "error",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Logs an error message."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "type": "var"
          }
        ]
      }
    },
    "trace": {
      "type": "function",
      "name": "trace",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Logs an error message with the current stack trace"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\nsupported. If an argument is not a string, the object dump will be\nlogged.",
            "type": "var"
          }
        ]
      }
    },
    "__logMessage": {
      "type": "function",
      "name": "__logMessage",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.core.MLogging",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper that calls the appropriate logger function with the current object\nand any number of items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "level {String} The log level of the message",
            "paramName": "level",
            "description": " The log level of the message",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "varargs {arguments} Arguments list to be logged",
            "paramName": "varargs",
            "description": " Arguments list to be logged",
            "type": "arguments"
          }
        ]
      }
    },
    "addListener": {
      "type": "function",
      "name": "addListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add event listener to this object."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\nthe event listener. When not given, the corresponding dispatcher\nusually falls back to a default, which is the target\nby convention. Note this is not a strict requirement, i.e.\ncustom dispatchers can follow a different strategy.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\nthe event listener. When not given, the corresponding dispatcher\nusually falls back to a default, which is the target\nby convention. Note this is not a strict requirement, i.e.\ncustom dispatchers can follow a different strategy.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\ncapturing phase or the bubbling phase of the event. The default is\nto attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\ncapturing phase or the bubbling phase of the event. The default is\nto attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\nusing the {@link #removeListenerById} method.",
            "type": "String",
            "desc": " An opaque id, which can be used to remove the event listener\nusing the {@link #removeListenerById} method."
          }
        ]
      }
    },
    "addListenerOnce": {
      "type": "function",
      "name": "addListenerOnce",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Add event listener to this object, which is only called once. After the\nlistener is called the event listener gets removed."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object ? window} reference to the 'this' variable inside the callback",
            "paramName": "context",
            "description": " reference to the 'this' variable inside the callback",
            "optional": true,
            "defaultValue": "window",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\ncapturing phase or the bubbling phase of the event. The default is\nto attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\ncapturing phase or the bubbling phase of the event. The default is\nto attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\nusing the {@link #removeListenerById} method.",
            "type": "String",
            "desc": " An opaque id, which can be used to remove the event listener\nusing the {@link #removeListenerById} method."
          }
        ]
      }
    },
    "removeListener": {
      "type": "function",
      "name": "removeListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove event listener from this object"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} reference to the 'this' variable inside the callback",
            "paramName": "self",
            "description": " reference to the 'this' variable inside the callback",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to remove the event listener of\nthe bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to remove the event listener of\nthe bubbling or of the capturing phase.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "Boolean",
            "desc": " Whether the event was removed successfully (has existed)"
          }
        ]
      }
    },
    "removeListenerById": {
      "type": "function",
      "name": "removeListenerById",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes an event listener from an event target by an id returned by\n{@link #addListener}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id returned by {@link #addListener}",
            "paramName": "id",
            "description": " The id returned by {@link #addListener}",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "Boolean",
            "desc": " Whether the event was removed successfully (has existed)"
          }
        ]
      }
    },
    "hasListener": {
      "type": "function",
      "name": "hasListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Check if there are one or more listeners for an event type."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to check for listeners of\nthe bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to check for listeners of\nthe bubbling or of the capturing phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the object has a listener of the given type.",
            "type": "Boolean",
            "desc": " Whether the object has a listener of the given type."
          }
        ]
      }
    },
    "dispatchEvent": {
      "type": "function",
      "name": "dispatchEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Dispatch an event on this object"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Event} event to dispatch",
            "paramName": "evt",
            "description": " event to dispatch",
            "type": "qx.event.type.Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented.",
            "type": "Boolean",
            "desc": " Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireEvent": {
      "type": "function",
      "name": "fireEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates and dispatches an event on this object."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\nthe event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\nthe event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented.",
            "type": "Boolean",
            "desc": " Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireNonBubblingEvent": {
      "type": "function",
      "name": "fireNonBubblingEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Create an event object and dispatch it on this object.\nThe event dispatched with this method does never bubble! Use only if you\nare sure that bubbling is not required."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\nthe event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\nthe event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented.",
            "type": "Boolean",
            "desc": " Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "fireDataEvent": {
      "type": "function",
      "name": "fireDataEvent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MEvent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates and dispatches an non-bubbling data event on this object."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var} User defined data attached to the event object",
            "paramName": "data",
            "description": " User defined data attached to the event object",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "oldData {var?null} The event's old data (optional)",
            "paramName": "oldData",
            "description": " The event's old data (optional)",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\naction prevented. The default action can either be the browser's\ndefault action of a native event (e.g. open the context menu on a\nright click) or the default action of a qooxdoo class (e.g. close\nthe window widget). The default action can be prevented by calling\n{@link qx.event.type.Event#preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\naction prevented. The default action can either be the browser's\ndefault action of a native event (e.g. open the context menu on a\nright click) or the default action of a qooxdoo class (e.g. close\nthe window widget). The default action can be prevented by calling\n{@link qx.event.type.Event#preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented.",
            "type": "Boolean",
            "desc": " Whether the event default was prevented or not.\nReturns true, when the event was NOT prevented."
          }
        ]
      }
    },
    "set": {
      "type": "function",
      "name": "set",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets multiple properties at once by using a property list or\nsets one property and its value by the first and second argument.\nAs a fallback, if no generated property setter could be found, a\nhandwritten setter will be searched and invoked if available."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "data {Map | String} a map of property values. The key is the name of the property.",
            "paramName": "data",
            "description": " a map of property values. The key is the name of the property.",
            "type": [
              "Map",
              "String"
            ]
          },
          {
            "name": "@param",
            "body": "value {var?} the value, only used when <code>data</code> is a string.",
            "paramName": "value",
            "description": " the value, only used when <code>data</code> is a string.",
            "optional": true,
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Returns this instance if <code>data</code> is a map\nor a non-generated setter is called; otherwise returns <code>value</code>.",
            "type": "qx.core.Object",
            "desc": " Returns this instance if <code>data</code> is a map\nor a non-generated setter is called; otherwise returns <code>value</code>."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist"
          }
        ]
      }
    },
    "get": {
      "type": "function",
      "name": "get",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the value of the given property. If no generated getter could be\nfound, a fallback tries to access a handwritten getter."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The value of the value",
            "type": "var",
            "desc": " The value of the value"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist"
          }
        ]
      }
    },
    "reset": {
      "type": "function",
      "name": "reset",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the value of the given property. If no generated resetter could be\nfound, a handwritten resetter will be invoked, if available."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "String"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist"
          }
        ]
      }
    },
    "isPropertyInitialized": {
      "type": "function",
      "name": "isPropertyInitialized",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MProperty",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Checks if the property is initialized, i.e. has a defined init value or\nhas got a value by a setter method."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property",
            "paramName": "prop",
            "description": " Name of the property",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the property is initialized",
            "type": "Boolean",
            "desc": " If the property is initialized"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the property defined does not exist"
          }
        ]
      }
    },
    "assert": {
      "type": "function",
      "name": "assert",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the condition evaluates to <code>true</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {var} Condition to check for. Must evaluate to\n<code>true</code>.",
            "paramName": "condition",
            "description": " Condition to check for. Must evaluate to\n<code>true</code>.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "fail": {
      "type": "function",
      "name": "fail",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Raise an {@link AssertionError}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "compact {Boolean} Show less verbose message. Default: false.",
            "paramName": "compact",
            "description": " Show less verbose message. Default: false.",
            "type": "Boolean"
          }
        ]
      }
    },
    "assertTrue": {
      "type": "function",
      "name": "assertTrue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is <code>true</code> (Identity check)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n<code>true</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n<code>true</code>.",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertFalse": {
      "type": "function",
      "name": "assertFalse",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is <code>false</code> (Identity check)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n<code>false</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n<code>false</code>.",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertEquals": {
      "type": "function",
      "name": "assertEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both values are equal. (Uses the equality operator\n<code>==</code>.)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNotEquals": {
      "type": "function",
      "name": "assertNotEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both values are not equal. (Uses the not equality operator\n<code>!=</code>.)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertEqualsFloat": {
      "type": "function",
      "name": "assertEqualsFloat",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both float values are equal. This might be needed because\nof the natural floating point inaccuracy of computers."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNotEqualsFloat": {
      "type": "function",
      "name": "assertNotEqualsFloat",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both float values are not equal. This might be needed\nbecause of the natural floating point inaccuracy of computers."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertIdentical": {
      "type": "function",
      "name": "assertIdentical",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both values are identical. (Uses the identity operator\n<code>===</code>.)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNotIdentical": {
      "type": "function",
      "name": "assertNotIdentical",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both values are not identical. (Uses the not identity operator\n<code>!==</code>.)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNotUndefined": {
      "type": "function",
      "name": "assertNotUndefined",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is not <code>undefined</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertUndefined": {
      "type": "function",
      "name": "assertUndefined",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is <code>undefined</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNotNull": {
      "type": "function",
      "name": "assertNotNull",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is not <code>null</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNull": {
      "type": "function",
      "name": "assertNull",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is <code>null</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertJsonEquals": {
      "type": "function",
      "name": "assertJsonEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the first two arguments are equal, when serialized into\nJSON."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} The expected value",
            "paramName": "expected",
            "description": " The expected value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} The found value",
            "paramName": "found",
            "description": " The found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertMatch": {
      "type": "function",
      "name": "assertMatch",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the given string matches the regular expression"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} String, which should match the regular expression",
            "paramName": "str",
            "description": " String, which should match the regular expression",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "re {RegExp} Regular expression to match",
            "paramName": "re",
            "description": " Regular expression to match",
            "type": "RegExp"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertArgumentsCount": {
      "type": "function",
      "name": "assertArgumentsCount",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the number of arguments is within the given range"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} The <code>arguments<code> variable of a function",
            "paramName": "args",
            "description": " The <code>arguments<code> variable of a function",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "minCount {Integer} Minimal number of arguments",
            "paramName": "minCount",
            "description": " Minimal number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxCount {Integer} Maximum number of arguments",
            "paramName": "maxCount",
            "description": " Maximum number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertEventFired": {
      "type": "function",
      "name": "assertEventFired",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that an event is fired."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\nfires the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\nfires the event.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "listener {Function?null} The function which will be invoked in the\nlistener. The function has one parameter called e which is the event.",
            "paramName": "listener",
            "description": " The function which will be invoked in the\nlistener. The function has one parameter called e which is the event.",
            "optional": true,
            "defaultValue": "null",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "msg {String?\"\"} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "optional": true,
            "defaultValue": "\"\"",
            "type": "String"
          }
        ]
      }
    },
    "assertEventNotFired": {
      "type": "function",
      "name": "assertEventNotFired",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that an event is not fired."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\nshould not fire the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\nshould not fire the event.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertException": {
      "type": "function",
      "name": "assertException",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Asserts that the callback raises a matching exception."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} function to check",
            "paramName": "callback",
            "description": " function to check",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "exception {Error?Error} Expected constructor of the exception.\nThe assertion fails if the raised exception is not an instance of the\nparameter.",
            "paramName": "exception",
            "description": " Expected constructor of the exception.\nThe assertion fails if the raised exception is not an instance of the\nparameter.",
            "optional": true,
            "defaultValue": "Error",
            "type": "Error"
          },
          {
            "name": "@param",
            "body": "re {String|RegExp} The assertion fails if the error message does\nnot match this parameter",
            "paramName": "re",
            "description": " The assertion fails if the error message does\nnot match this parameter",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertInArray": {
      "type": "function",
      "name": "assertInArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an item in the given array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of valid values",
            "paramName": "array",
            "description": " List of valid values",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNotInArray": {
      "type": "function",
      "name": "assertNotInArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is NOT an item in the given array"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of values",
            "paramName": "array",
            "description": " List of values",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails",
            "type": "String"
          }
        ]
      }
    },
    "assertArrayEquals": {
      "type": "function",
      "name": "assertArrayEquals",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that both array have identical array items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Array} The expected array",
            "paramName": "expected",
            "description": " The expected array",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "found {Array} The found array",
            "paramName": "found",
            "description": " The found array",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertKeyInMap": {
      "type": "function",
      "name": "assertKeyInMap",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a key in the given map."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "map {Map} Map, where the keys represent the valid values",
            "paramName": "map",
            "description": " Map, where the keys represent the valid values",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertFunction": {
      "type": "function",
      "name": "assertFunction",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a function."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertString": {
      "type": "function",
      "name": "assertString",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a string."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertBoolean": {
      "type": "function",
      "name": "assertBoolean",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a boolean."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertNumber": {
      "type": "function",
      "name": "assertNumber",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a number."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertPositiveNumber": {
      "type": "function",
      "name": "assertPositiveNumber",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a number >= 0."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertInteger": {
      "type": "function",
      "name": "assertInteger",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an integer."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertPositiveInteger": {
      "type": "function",
      "name": "assertPositiveInteger",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an integer >= 0."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertInRange": {
      "type": "function",
      "name": "assertInRange",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is inside the given range."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "min {Number} lower bound",
            "paramName": "min",
            "description": " lower bound",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "max {Number} upper bound",
            "paramName": "max",
            "description": " upper bound",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertObject": {
      "type": "function",
      "name": "assertObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an object."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertArray": {
      "type": "function",
      "name": "assertArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertMap": {
      "type": "function",
      "name": "assertMap",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a map either created using <code>new Object</code>\nor by using the object literal notation <code>{ ... }</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertRegExp": {
      "type": "function",
      "name": "assertRegExp",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a regular expression."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertType": {
      "type": "function",
      "name": "assertType",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value has the given type using the <code>typeof</code>\noperator. Because the type is not always what it is supposed to be it is\nbetter to use more explicit checks like {@link #assertString} or\n{@link #assertArray}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} expected type of the value",
            "paramName": "type",
            "description": " expected type of the value",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertInstance": {
      "type": "function",
      "name": "assertInstance",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an instance of the given class."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "clazz {Class} The value must be an instance of this class",
            "paramName": "clazz",
            "description": " The value must be an instance of this class",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertInterface": {
      "type": "function",
      "name": "assertInterface",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value implements the given interface."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "iface {Class} The value must implement this interface",
            "paramName": "iface",
            "description": " The value must implement this interface",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertCssColor": {
      "type": "function",
      "name": "assertCssColor",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value represents the given CSS color value. This method\nparses the color strings and compares the RGB values. It is able to\nparse values supported by {@link qx.util.ColorUtil#stringToRgb}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {String} The expected color",
            "paramName": "expected",
            "description": " The expected color",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {String} The value to check",
            "paramName": "value",
            "description": " The value to check",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertElement": {
      "type": "function",
      "name": "assertElement",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is a DOM element."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertQxObject": {
      "type": "function",
      "name": "assertQxObject",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an instance of {@link qx.core.Object}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "assertQxWidget": {
      "type": "function",
      "name": "assertQxWidget",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.MAssert",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assert that the value is an instance of {@link qx.ui.core.Widget}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "String"
          }
        ]
      }
    },
    "getAutoDisposeItems": {
      "type": "function",
      "name": "getAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "isAutoDisposeItems": {
      "type": "function",
      "name": "isAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for undefined"
          }
        ]
      }
    },
    "setAutoDisposeItems": {
      "type": "function",
      "name": "setAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for undefined"
          }
        ]
      }
    },
    "resetAutoDisposeItems": {
      "type": "function",
      "name": "resetAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {}
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1121,
        "column": 2
      },
      "end": {
        "line": 1133,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "abstract": true,
  "descendants": []
}