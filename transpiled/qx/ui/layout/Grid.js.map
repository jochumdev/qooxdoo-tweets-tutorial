{
  "version": 3,
  "sources": [
    "Grid.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "construct",
    "spacingX",
    "spacingY",
    "__rowData",
    "__colData",
    "setSpacingX",
    "setSpacingY",
    "properties",
    "check",
    "init",
    "apply",
    "members",
    "__grid",
    "__colSpans",
    "__rowSpans",
    "__maxRowIndex",
    "__maxColIndex",
    "__rowHeights",
    "__colWidths",
    "verifyLayoutProperty",
    "core",
    "Environment",
    "select",
    "item",
    "name",
    "value",
    "layoutProperties",
    "assert",
    "assertInteger",
    "__buildGrid",
    "grid",
    "colSpans",
    "rowSpans",
    "maxRowIndex",
    "maxColIndex",
    "children",
    "_getLayoutChildren",
    "i",
    "l",
    "length",
    "child",
    "props",
    "getLayoutProperties",
    "row",
    "column",
    "colSpan",
    "rowSpan",
    "Error",
    "x",
    "y",
    "undefined",
    "Math",
    "max",
    "push",
    "_invalidChildrenCache",
    "_setRowData",
    "key",
    "rowData",
    "_setColumnData",
    "colData",
    "setSpacing",
    "spacing",
    "setColumnAlign",
    "hAlign",
    "vAlign",
    "get",
    "assertInArray",
    "_applyLayoutChange",
    "getColumnAlign",
    "setRowAlign",
    "getRowAlign",
    "getCellWidget",
    "getRowCount",
    "getColumnCount",
    "getCellAlign",
    "widget",
    "widgetProps",
    "getAlignY",
    "getAlignX",
    "setColumnFlex",
    "flex",
    "getColumnFlex",
    "setRowFlex",
    "getRowFlex",
    "rowFlex",
    "setColumnMaxWidth",
    "maxWidth",
    "getColumnMaxWidth",
    "Infinity",
    "setColumnWidth",
    "width",
    "getColumnWidth",
    "setColumnMinWidth",
    "minWidth",
    "getColumnMinWidth",
    "setRowMaxHeight",
    "maxHeight",
    "getRowMaxHeight",
    "setRowHeight",
    "height",
    "getRowHeight",
    "setRowMinHeight",
    "minHeight",
    "getRowMinHeight",
    "__getOuterSize",
    "hint",
    "getSizeHint",
    "hMargins",
    "getMarginLeft",
    "getMarginRight",
    "vMargins",
    "getMarginTop",
    "getMarginBottom",
    "outerSize",
    "_fixHeightsRowSpan",
    "rowHeights",
    "vSpacing",
    "getSpacingY",
    "widgetRow",
    "prefSpanHeight",
    "minSpanHeight",
    "rowFlexes",
    "j",
    "rowHeight",
    "min",
    "lang",
    "Object",
    "isEmpty",
    "rowIncrements",
    "Util",
    "computeFlexOffsets",
    "k",
    "offset",
    "totalSpacing",
    "availableHeight",
    "avgRowHeight",
    "floor",
    "usedHeight",
    "rowsNeedAddition",
    "currentHeight",
    "additionalRowHeight",
    "_fixWidthsColSpan",
    "colWidths",
    "hSpacing",
    "getSpacingX",
    "widgetColumn",
    "prefSpanWidth",
    "minSpanWidth",
    "colFlexes",
    "col",
    "colWidth",
    "colFlex",
    "colIncrements",
    "_getRowHeights",
    "widgetRowSpan",
    "cellSize",
    "_getColWidths",
    "widgetColSpan",
    "_getColumnFlexOffsets",
    "diff",
    "flexibles",
    "_getRowFlexOffsets",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "prefWidths",
    "colStretchOffsets",
    "prefHeights",
    "rowStretchOffsets",
    "left",
    "top",
    "spanWidth",
    "spanHeight",
    "cellHint",
    "marginTop",
    "marginLeft",
    "marginBottom",
    "marginRight",
    "cellWidth",
    "cellHeight",
    "cellAlign",
    "cellLeft",
    "computeHorizontalAlignOffset",
    "cellTop",
    "computeVerticalAlignOffset",
    "invalidateLayoutCache",
    "_computeSizeHint",
    "destruct",
    "Grid"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA2EAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,mBAAhB,EACA;AACEC,YAASN,GAAGO,EAAH,CAAMC,MAAN,CAAaC,QADxB;;AAQE;;;;;;AAMA;;;;;;AAMAC,eAAY,mBAASC,QAAT,EAAmBC,QAAnB,EACZ;AACE;;AAEA,WAAKC,SAAL,GAAiB,EAAjB;AACA,WAAKC,SAAL,GAAiB,EAAjB;;AAEA,UAAIH,QAAJ,EAAc;AACZ,aAAKI,WAAL,CAAiBJ,QAAjB;AACD;;AAED,UAAIC,QAAJ,EAAc;AACZ,aAAKI,WAAL,CAAiBJ,QAAjB;AACD;AACF,KAlCH;;AAuCE;;;;;;AAMAK,gBACA;AACE;;;AAGAN,gBACA;AACEO,eAAQ,SADV;AAEEC,cAAO,CAFT;AAGEC,eAAQ;AAHV,OALF;;AAYE;;;AAGAR,gBACA;AACEM,eAAQ,SADV;AAEEC,cAAO,CAFT;AAGEC,eAAQ;AAHV;AAhBF,KA9CF;;AAwEE;;;;;;AAMAC,aACA;AACE;AACAC,cAAS,IAFX;AAGET,iBAAY,IAHd;AAIEC,iBAAY,IAJd;;AAMES,kBAAa,IANf;AAOEC,kBAAa,IAPf;AAQEC,qBAAgB,IARlB;AASEC,qBAAgB,IATlB;;AAWE;AACAC,oBAAe,IAZjB;;AAcE;AACAC,mBAAc,IAfhB;;AAmBE;AACAC,4BAAuB7B,GAAG8B,IAAH,CAAQC,WAAR,CAAoBC,MAApB,CAA2B,UAA3B,EACvB;AACE,gBAAS,eAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB,EACT;AACE,cAAIC,mBAAmB;AACrB,mBAAQ,CADa;AAErB,sBAAW,CAFU;AAGrB,uBAAY,CAHS;AAIrB,uBAAY;AAJS,WAAvB;AAMA,eAAKC,MAAL,CAAYD,iBAAiBF,IAAjB,KAA0B,CAAtC,EAAyC,mBAAiBA,IAAjB,GAAsB,wCAA/D;AACA,eAAKI,aAAL,CAAmBH,KAAnB;AACA,eAAKE,MAAL,CAAYF,SAAS,CAArB,EAAwB,wBAAxB;AACD,SAZH;;AAcE,iBAAU;AAdZ,OADuB,CApBzB;;AAuCE;;;AAGAI,mBAAc,uBACd;AACE,YAAIC,OAAO,EAAX;AACA,YAAIC,WAAW,EAAf;AACA,YAAIC,WAAW,EAAf;;AAEA,YAAIC,cAAc,CAAC,CAAnB;AACA,YAAIC,cAAc,CAAC,CAAnB;;AAEA,YAAIC,WAAW,KAAKC,kBAAL,EAAf;;AAEA,aAAK,IAAIC,IAAE,CAAN,EAAQC,IAAEH,SAASI,MAAxB,EAAgCF,IAAEC,CAAlC,EAAqCD,GAArC,EACA;AACE,cAAIG,QAAQL,SAASE,CAAT,CAAZ;AACA,cAAII,QAAQD,MAAME,mBAAN,EAAZ;;AAEA,cAAIC,MAAMF,MAAME,GAAhB;AACA,cAAIC,SAASH,MAAMG,MAAnB;;AAEAH,gBAAMI,OAAN,GAAgBJ,MAAMI,OAAN,IAAiB,CAAjC;AACAJ,gBAAMK,OAAN,GAAgBL,MAAMK,OAAN,IAAiB,CAAjC;;AAEA;AACA,cAAIH,OAAO,IAAP,IAAeC,UAAU,IAA7B,EAAmC;AACjC,kBAAM,IAAIG,KAAJ,CACJ,mEACAP,KADA,GACQ,oBAFJ,CAAN;AAID;;AAED,cAAIV,KAAKa,GAAL,KAAab,KAAKa,GAAL,EAAUC,MAAV,CAAjB,EAAoC;AAClC,kBAAM,IAAIG,KAAJ,CACJ,wBAAwBP,KAAxB,GAAgC,MAAhC,GACA,6BADA,GACgCV,KAAKa,GAAL,EAAUC,MAAV,CADhC,GAEA,kBAFA,GAEqBD,GAFrB,GAE2B,IAF3B,GAEkCC,MAFlC,GAE2C,SAF3C,GAEuD,IAFvD,GAE8D,GAH1D,CAAN;AAKD;;AAED,eAAK,IAAII,IAAEJ,MAAX,EAAmBI,IAAEJ,SAAOH,MAAMI,OAAlC,EAA2CG,GAA3C,EACA;AACE,iBAAK,IAAIC,IAAEN,GAAX,EAAgBM,IAAEN,MAAIF,MAAMK,OAA5B,EAAqCG,GAArC,EACA;AACE,kBAAInB,KAAKmB,CAAL,KAAWC,SAAf,EAA0B;AACvBpB,qBAAKmB,CAAL,IAAU,EAAV;AACF;;AAEDnB,mBAAKmB,CAAL,EAAQD,CAAR,IAAaR,KAAb;;AAEAN,4BAAciB,KAAKC,GAAL,CAASlB,WAAT,EAAsBc,CAAtB,CAAd;AACAf,4BAAckB,KAAKC,GAAL,CAASnB,WAAT,EAAsBgB,CAAtB,CAAd;AACD;AACF;;AAED,cAAIR,MAAMK,OAAN,GAAgB,CAApB,EAAuB;AACrBd,qBAASqB,IAAT,CAAcb,KAAd;AACD;;AAED,cAAIC,MAAMI,OAAN,GAAgB,CAApB,EAAuB;AACrBd,qBAASsB,IAAT,CAAcb,KAAd;AACD;AACF;;AAED;AACA;AACA,aAAK,IAAIS,IAAE,CAAX,EAAcA,KAAGhB,WAAjB,EAA8BgB,GAA9B,EAAmC;AACjC,cAAInB,KAAKmB,CAAL,KAAWC,SAAf,EAA0B;AACvBpB,iBAAKmB,CAAL,IAAU,EAAV;AACF;AACF;;AAED,aAAKrC,MAAL,GAAckB,IAAd;;AAEA,aAAKjB,UAAL,GAAkBkB,QAAlB;AACA,aAAKjB,UAAL,GAAkBkB,QAAlB;;AAEA,aAAKjB,aAAL,GAAqBkB,WAArB;AACA,aAAKjB,aAAL,GAAqBkB,WAArB;;AAEA,aAAKjB,YAAL,GAAoB,IAApB;AACA,aAAKC,WAAL,GAAmB,IAAnB;;AAEA;AACA,eAAO,KAAKoC,qBAAZ;AACD,OA7HH;;AAgIE;;;;;;;AAOAC,mBAAc,qBAASZ,GAAT,EAAca,GAAd,EAAmB/B,KAAnB,EACd;AACE,YAAIgC,UAAU,KAAKtD,SAAL,CAAewC,GAAf,CAAd;;AAEA,YAAI,CAACc,OAAL,EACA;AACE,eAAKtD,SAAL,CAAewC,GAAf,IAAsB,EAAtB;AACA,eAAKxC,SAAL,CAAewC,GAAf,EAAoBa,GAApB,IAA2B/B,KAA3B;AACD,SAJD,MAMA;AACEgC,kBAAQD,GAAR,IAAe/B,KAAf;AACD;AACF,OApJH;;AAuJE;;;;;;;AAOAiC,sBAAiB,wBAASd,MAAT,EAAiBY,GAAjB,EAAsB/B,KAAtB,EACjB;AACE,YAAIkC,UAAU,KAAKvD,SAAL,CAAewC,MAAf,CAAd;;AAEA,YAAI,CAACe,OAAL,EACA;AACE,eAAKvD,SAAL,CAAewC,MAAf,IAAyB,EAAzB;AACA,eAAKxC,SAAL,CAAewC,MAAf,EAAuBY,GAAvB,IAA8B/B,KAA9B;AACD,SAJD,MAMA;AACEkC,kBAAQH,GAAR,IAAe/B,KAAf;AACD;AACF,OA3KH;;AA8KE;;;;;;;AAOAmC,kBAAa,oBAASC,OAAT,EACb;AACE,aAAKvD,WAAL,CAAiBuD,OAAjB;AACA,aAAKxD,WAAL,CAAiBwD,OAAjB;AACA,eAAO,IAAP;AACD,OA1LH;;AA6LE;;;;;;;;;;;;;;;;AAgBAC,sBAAiB,wBAASlB,MAAT,EAAiBmB,MAAjB,EAAyBC,MAAzB,EACjB;AACE,YAAI1E,GAAG8B,IAAH,CAAQC,WAAR,CAAoB4C,GAApB,CAAwB,UAAxB,CAAJ,EACA;AACE,eAAKrC,aAAL,CAAmBgB,MAAnB,EAA2B,4BAA3B;AACA,eAAKsB,aAAL,CAAmBH,MAAnB,EAA2B,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,CAA3B;AACA,eAAKG,aAAL,CAAmBF,MAAnB,EAA2B,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB,CAA3B;AACD;;AAED,aAAKN,cAAL,CAAoBd,MAApB,EAA4B,QAA5B,EAAsCmB,MAAtC;AACA,aAAKL,cAAL,CAAoBd,MAApB,EAA4B,QAA5B,EAAsCoB,MAAtC;;AAEA,aAAKG,kBAAL;;AAEA,eAAO,IAAP;AACD,OA5NH;;AA+NE;;;;;;;AAOAC,sBAAiB,wBAASxB,MAAT,EACjB;AACE,YAAIe,UAAU,KAAKvD,SAAL,CAAewC,MAAf,KAA0B,EAAxC;;AAEA,eAAO;AACLoB,kBAASL,QAAQK,MAAR,IAAkB,KADtB;AAELD,kBAASJ,QAAQI,MAAR,IAAkB;AAFtB,SAAP;AAID,OA9OH;;AAiPE;;;;;;;;;;;;;;;;AAgBAM,mBAAc,qBAAS1B,GAAT,EAAcoB,MAAd,EAAsBC,MAAtB,EACd;AACE,YAAI1E,GAAG8B,IAAH,CAAQC,WAAR,CAAoB4C,GAApB,CAAwB,UAAxB,CAAJ,EACA;AACE,eAAKrC,aAAL,CAAmBe,GAAnB,EAAwB,yBAAxB;AACA,eAAKuB,aAAL,CAAmBH,MAAnB,EAA2B,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,CAA3B;AACA,eAAKG,aAAL,CAAmBF,MAAnB,EAA2B,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB,CAA3B;AACD;;AAED,aAAKT,WAAL,CAAiBZ,GAAjB,EAAsB,QAAtB,EAAgCoB,MAAhC;AACA,aAAKR,WAAL,CAAiBZ,GAAjB,EAAsB,QAAtB,EAAgCqB,MAAhC;;AAEA,aAAKG,kBAAL;;AAEA,eAAO,IAAP;AACD,OAhRH;;AAmRE;;;;;;;AAOAG,mBAAc,qBAAS3B,GAAT,EACd;AACE,YAAIc,UAAU,KAAKtD,SAAL,CAAewC,GAAf,KAAuB,EAArC;;AAEA,eAAO;AACLqB,kBAASP,QAAQO,MAAR,IAAkB,KADtB;AAELD,kBAASN,QAAQM,MAAR,IAAkB;AAFtB,SAAP;AAID,OAlSH;;AAqSE;;;;;;;;;AASAQ,qBAAgB,uBAAS5B,GAAT,EAAcC,MAAd,EAChB;AACE,YAAI,KAAKU,qBAAT,EAAgC;AAC9B,eAAKzB,WAAL;AACD;;AAED,YAAIc,MAAM,KAAK/B,MAAL,CAAY+B,GAAZ,KAAoB,EAA9B;AACA,eAAOA,IAAIC,MAAJ,KAAgB,IAAvB;AACD,OAtTH;;AAyTE;;;;;AAKA4B,mBAAc,uBACd;AACE,YAAI,KAAKlB,qBAAT,EAAgC;AAC9B,eAAKzB,WAAL;AACD;;AAED,eAAO,KAAKd,aAAL,GAAqB,CAA5B;AACD,OArUH;;AAwUE;;;;;AAKA0D,sBAAiB,0BACjB;AACE,YAAI,KAAKnB,qBAAT,EAAgC;AAC9B,eAAKzB,WAAL;AACD;;AAED,eAAO,KAAKb,aAAL,GAAqB,CAA5B;AACD,OApVH;;AAuVE;;;;;;;;;;;;AAYA0D,oBAAe,sBAAS/B,GAAT,EAAcC,MAAd,EACf;AACE,YAAIoB,SAAS,KAAb;AACA,YAAID,SAAS,MAAb;;AAEA,YAAIN,UAAU,KAAKtD,SAAL,CAAewC,GAAf,CAAd;AACA,YAAIgB,UAAU,KAAKvD,SAAL,CAAewC,MAAf,CAAd;;AAEA,YAAI+B,SAAS,KAAK/D,MAAL,CAAY+B,GAAZ,EAAiBC,MAAjB,CAAb;AACA,YAAI+B,MAAJ,EACA;AACE,cAAIC,cAAc;AAChBZ,oBAASW,OAAOE,SAAP,EADO;AAEhBd,oBAASY,OAAOG,SAAP;AAFO,WAAlB;AAID,SAND,MAQA;AACEF,wBAAc,EAAd;AACD;;AAED;AACA;AACA,YAAIA,YAAYZ,MAAhB,EAAwB;AACtBA,mBAASY,YAAYZ,MAArB;AACD,SAFD,MAEO,IAAIP,WAAWA,QAAQO,MAAvB,EAA+B;AACpCA,mBAASP,QAAQO,MAAjB;AACD,SAFM,MAEA,IAAIL,WAAWA,QAAQK,MAAvB,EAA+B;AACpCA,mBAASL,QAAQK,MAAjB;AACD;;AAED;AACA;AACA,YAAIY,YAAYb,MAAhB,EAAwB;AACtBA,mBAASa,YAAYb,MAArB;AACD,SAFD,MAEO,IAAIJ,WAAWA,QAAQI,MAAvB,EAA+B;AACpCA,mBAASJ,QAAQI,MAAjB;AACD,SAFM,MAEA,IAAIN,WAAWA,QAAQM,MAAvB,EAA+B;AACpCA,mBAASN,QAAQM,MAAjB;AACD;;AAED,eAAO;AACLC,kBAASA,MADJ;AAELD,kBAASA;AAFJ,SAAP;AAID,OAhZH;;AAmZE;;;;;;;;AAQAgB,qBAAgB,uBAASnC,MAAT,EAAiBoC,IAAjB,EAChB;AACE,aAAKtB,cAAL,CAAoBd,MAApB,EAA4B,MAA5B,EAAoCoC,IAApC;AACA,aAAKb,kBAAL;AACA,eAAO,IAAP;AACD,OAhaH;;AAmaE;;;;;;AAMAc,qBAAgB,uBAASrC,MAAT,EAChB;AACE,YAAIe,UAAU,KAAKvD,SAAL,CAAewC,MAAf,KAA0B,EAAxC;AACA,eAAOe,QAAQqB,IAAR,KAAiB9B,SAAjB,GAA6BS,QAAQqB,IAArC,GAA4C,CAAnD;AACD,OA7aH;;AAgbE;;;;;;;;AAQAE,kBAAa,oBAASvC,GAAT,EAAcqC,IAAd,EACb;AACE,aAAKzB,WAAL,CAAiBZ,GAAjB,EAAsB,MAAtB,EAA8BqC,IAA9B;AACA,aAAKb,kBAAL;AACA,eAAO,IAAP;AACD,OA7bH;;AAgcE;;;;;;AAMAgB,kBAAa,oBAASxC,GAAT,EACb;AACE,YAAIc,UAAU,KAAKtD,SAAL,CAAewC,GAAf,KAAuB,EAArC;AACA,YAAIyC,UAAU3B,QAAQuB,IAAR,KAAiB9B,SAAjB,GAA6BO,QAAQuB,IAArC,GAA4C,CAA1D;AACA,eAAOI,OAAP;AACD,OA3cH;;AA8cE;;;;;;;;AAQAC,yBAAoB,2BAASzC,MAAT,EAAiB0C,QAAjB,EACpB;AACE,aAAK5B,cAAL,CAAoBd,MAApB,EAA4B,UAA5B,EAAwC0C,QAAxC;AACA,aAAKnB,kBAAL;AACA,eAAO,IAAP;AACD,OA3dH;;AA8dE;;;;;;AAMAoB,yBAAoB,2BAAS3C,MAAT,EACpB;AACE,YAAIe,UAAU,KAAKvD,SAAL,CAAewC,MAAf,KAA0B,EAAxC;AACA,eAAOe,QAAQ2B,QAAR,KAAqBpC,SAArB,GAAiCS,QAAQ2B,QAAzC,GAAoDE,QAA3D;AACD,OAxeH;;AA2eE;;;;;;;;AAQAC,sBAAiB,wBAAS7C,MAAT,EAAiB8C,KAAjB,EACjB;AACE,aAAKhC,cAAL,CAAoBd,MAApB,EAA4B,OAA5B,EAAqC8C,KAArC;AACA,aAAKvB,kBAAL;AACA,eAAO,IAAP;AACD,OAxfH;;AA2fE;;;;;;AAMAwB,sBAAiB,wBAAS/C,MAAT,EACjB;AACE,YAAIe,UAAU,KAAKvD,SAAL,CAAewC,MAAf,KAA0B,EAAxC;AACA,eAAOe,QAAQ+B,KAAR,KAAkBxC,SAAlB,GAA8BS,QAAQ+B,KAAtC,GAA8C,IAArD;AACD,OArgBH;;AAwgBE;;;;;;;;AAQAE,yBAAoB,2BAAShD,MAAT,EAAiBiD,QAAjB,EACpB;AACE,aAAKnC,cAAL,CAAoBd,MAApB,EAA4B,UAA5B,EAAwCiD,QAAxC;AACA,aAAK1B,kBAAL;AACA,eAAO,IAAP;AACD,OArhBH;;AAwhBE;;;;;;AAMA2B,yBAAoB,2BAASlD,MAAT,EACpB;AACE,YAAIe,UAAU,KAAKvD,SAAL,CAAewC,MAAf,KAA0B,EAAxC;AACA,eAAOe,QAAQkC,QAAR,IAAoB,CAA3B;AACD,OAliBH;;AAqiBE;;;;;;;;AAQAE,uBAAkB,yBAASpD,GAAT,EAAcqD,SAAd,EAClB;AACE,aAAKzC,WAAL,CAAiBZ,GAAjB,EAAsB,WAAtB,EAAmCqD,SAAnC;AACA,aAAK7B,kBAAL;AACA,eAAO,IAAP;AACD,OAljBH;;AAqjBE;;;;;;AAMA8B,uBAAkB,yBAAStD,GAAT,EAClB;AACE,YAAIc,UAAU,KAAKtD,SAAL,CAAewC,GAAf,KAAuB,EAArC;AACA,eAAOc,QAAQuC,SAAR,IAAqBR,QAA5B;AACD,OA/jBH;;AAkkBE;;;;;;;;AAQAU,oBAAe,sBAASvD,GAAT,EAAcwD,MAAd,EACf;AACE,aAAK5C,WAAL,CAAiBZ,GAAjB,EAAsB,QAAtB,EAAgCwD,MAAhC;AACA,aAAKhC,kBAAL;AACA,eAAO,IAAP;AACD,OA/kBH;;AAklBE;;;;;;AAMAiC,oBAAe,sBAASzD,GAAT,EACf;AACE,YAAIc,UAAU,KAAKtD,SAAL,CAAewC,GAAf,KAAuB,EAArC;AACA,eAAOc,QAAQ0C,MAAR,KAAmBjD,SAAnB,GAA+BO,QAAQ0C,MAAvC,GAAgD,IAAvD;AACD,OA5lBH;;AA+lBE;;;;;;;;AAQAE,uBAAkB,yBAAS1D,GAAT,EAAc2D,SAAd,EAClB;AACE,aAAK/C,WAAL,CAAiBZ,GAAjB,EAAsB,WAAtB,EAAmC2D,SAAnC;AACA,aAAKnC,kBAAL;AACA,eAAO,IAAP;AACD,OA5mBH;;AA+mBE;;;;;;AAMAoC,uBAAkB,yBAAS5D,GAAT,EAClB;AACE,YAAIc,UAAU,KAAKtD,SAAL,CAAewC,GAAf,KAAuB,EAArC;AACA,eAAOc,QAAQ6C,SAAR,IAAqB,CAA5B;AACD,OAznBH;;AA4nBE;;;;;;AAMAE,sBAAiB,wBAAS7B,MAAT,EACjB;AACE,YAAI8B,OAAO9B,OAAO+B,WAAP,EAAX;AACA,YAAIC,WAAWhC,OAAOiC,aAAP,KAAyBjC,OAAOkC,cAAP,EAAxC;AACA,YAAIC,WAAWnC,OAAOoC,YAAP,KAAwBpC,OAAOqC,eAAP,EAAvC;;AAEA,YAAIC,YAAY;AACdd,kBAAQM,KAAKN,MAAL,GAAcW,QADR;AAEdpB,iBAAOe,KAAKf,KAAL,GAAaiB,QAFN;AAGdL,qBAAWG,KAAKH,SAAL,GAAiBQ,QAHd;AAIdjB,oBAAUY,KAAKZ,QAAL,GAAgBc,QAJZ;AAKdX,qBAAWS,KAAKT,SAAL,GAAiBc,QALd;AAMdxB,oBAAUmB,KAAKnB,QAAL,GAAgBqB;AANZ,SAAhB;;AASA,eAAOM,SAAP;AACD,OAlpBH;;AAqpBE;;;;;;;;;;;;;AAaAC,0BAAqB,4BAASC,UAAT,EACrB;AACE,YAAIC,WAAW,KAAKC,WAAL,EAAf;;AAEA,aAAK,IAAIhF,IAAE,CAAN,EAASC,IAAE,KAAKxB,UAAL,CAAgByB,MAAhC,EAAwCF,IAAEC,CAA1C,EAA6CD,GAA7C,EACA;AACE,cAAIsC,SAAS,KAAK7D,UAAL,CAAgBuB,CAAhB,CAAb;;AAEA,cAAIoE,OAAO,KAAKD,cAAL,CAAoB7B,MAApB,CAAX;;AAEA,cAAIC,cAAcD,OAAOjC,mBAAP,EAAlB;AACA,cAAI4E,YAAY1C,YAAYjC,GAA5B;;AAEA,cAAI4E,iBAAiBH,YAAYxC,YAAY9B,OAAZ,GAAsB,CAAlC,CAArB;AACA,cAAI0E,gBAAgBD,cAApB;;AAEA,cAAIE,YAAY,EAAhB;;AAEA,eAAK,IAAIC,IAAE,CAAX,EAAcA,IAAE9C,YAAY9B,OAA5B,EAAqC4E,GAArC,EACA;AACE,gBAAI/E,MAAMiC,YAAYjC,GAAZ,GAAgB+E,CAA1B;AACA,gBAAIC,YAAYR,WAAWxE,GAAX,CAAhB;AACA,gBAAIyC,UAAU,KAAKD,UAAL,CAAgBxC,GAAhB,CAAd;;AAEA,gBAAIyC,UAAU,CAAd,EACA;AACE;AACAqC,wBAAU9E,GAAV,IACA;AACEiF,qBAAMD,UAAUrB,SADlB;AAEE7E,uBAAQkG,UAAUxB,MAFpB;AAGE/C,qBAAMuE,UAAU3B,SAHlB;AAIEhB,sBAAMI;AAJR,eADA;AAOD;;AAEDmC,8BAAkBI,UAAUxB,MAA5B;AACAqB,6BAAiBG,UAAUrB,SAA3B;AACD;;AAED;AACA;AACA,cAAIiB,iBAAiBd,KAAKN,MAA1B,EACA;AACE,gBAAI,CAAC7G,GAAGuI,IAAH,CAAQC,MAAR,CAAeC,OAAf,CAAuBN,SAAvB,CAAL,EAAwC;AACtC,kBAAIO,gBAAgB1I,GAAGO,EAAH,CAAMC,MAAN,CAAamI,IAAb,CAAkBC,kBAAlB,CAClBT,SADkB,EACPhB,KAAKN,MADE,EACMoB,cADN,CAApB;;AAIA,mBAAK,IAAIY,IAAE,CAAX,EAAcA,IAAEvD,YAAY9B,OAA5B,EAAqCqF,GAArC,EACA;AACE,oBAAIC,SAASJ,cAAcV,YAAUa,CAAxB,IAA6BH,cAAcV,YAAUa,CAAxB,EAA2BC,MAAxD,GAAiE,CAA9E;AACAjB,2BAAWG,YAAUa,CAArB,EAAwBhC,MAAxB,IAAkCiC,MAAlC;AACD;AACH;AACC,aAXD,MAWO;AACL,kBAAIC,eAAejB,YAAYxC,YAAY9B,OAAZ,GAAsB,CAAlC,CAAnB;AACA,kBAAIwF,kBAAkB7B,KAAKN,MAAL,GAAckC,YAApC;;AAEA;AACA;AACA,kBAAIE,eACFpF,KAAKqF,KAAL,CAAWF,kBAAkB1D,YAAY9B,OAAzC,CADF;;AAGA;AACA;AACA,kBAAI2F,aAAa,CAAjB;AACA,kBAAIC,mBAAmB,CAAvB;AACA,mBAAK,IAAIP,IAAI,CAAb,EAAgBA,IAAIvD,YAAY9B,OAAhC,EAAyCqF,GAAzC,EAA8C;AAC5C,oBAAIQ,gBAAgBxB,WAAWG,YAAYa,CAAvB,EAA0BhC,MAA9C;AACAsC,8BAAcE,aAAd;AACA,oBAAIA,gBAAgBJ,YAApB,EAAkC;AAChCG;AACD;AACF;;AAED;AACA;AACA,kBAAIE,sBACFzF,KAAKqF,KAAL,CAAW,CAACF,kBAAkBG,UAAnB,IAAiCC,gBAA5C,CADF;;AAGA;AACA,mBAAK,IAAIP,IAAI,CAAb,EAAgBA,IAAIvD,YAAY9B,OAAhC,EAAyCqF,GAAzC,EAA8C;AAC5C,oBAAIhB,WAAWG,YAAYa,CAAvB,EAA0BhC,MAA1B,GAAmCoC,YAAvC,EAAqD;AACnDpB,6BAAWG,YAAYa,CAAvB,EAA0BhC,MAA1B,IAAoCyC,mBAApC;AACD;AACF;AACF;AACF;;AAED;AACA;AACA,cAAIpB,gBAAgBf,KAAKH,SAAzB,EACA;AACE,gBAAI0B,gBAAgB1I,GAAGO,EAAH,CAAMC,MAAN,CAAamI,IAAb,CAAkBC,kBAAlB,CAClBT,SADkB,EACPhB,KAAKH,SADE,EACSkB,aADT,CAApB;;AAIA,iBAAK,IAAIE,IAAE,CAAX,EAAcA,IAAE9C,YAAY9B,OAA5B,EAAqC4E,GAArC,EACA;AACE,kBAAIU,SAASJ,cAAcV,YAAUI,CAAxB,IAA6BM,cAAcV,YAAUI,CAAxB,EAA2BU,MAAxD,GAAiE,CAA9E;AACAjB,yBAAWG,YAAUI,CAArB,EAAwBpB,SAAxB,IAAqC8B,MAArC;AACD;AACF;AACF;AACF,OA3wBH;;AA8wBE;;;;;;;;;;;;;AAaAS,yBAAoB,2BAASC,SAAT,EACpB;AACE,YAAIC,WAAW,KAAKC,WAAL,EAAf;;AAEA,aAAK,IAAI3G,IAAE,CAAN,EAASC,IAAE,KAAKzB,UAAL,CAAgB0B,MAAhC,EAAwCF,IAAEC,CAA1C,EAA6CD,GAA7C,EACA;AACE,cAAIsC,SAAS,KAAK9D,UAAL,CAAgBwB,CAAhB,CAAb;;AAEA,cAAIoE,OAAO,KAAKD,cAAL,CAAoB7B,MAApB,CAAX;;AAEA,cAAIC,cAAcD,OAAOjC,mBAAP,EAAlB;AACA,cAAIuG,eAAerE,YAAYhC,MAA/B;;AAEA,cAAIsG,gBAAgBH,YAAYnE,YAAY/B,OAAZ,GAAsB,CAAlC,CAApB;AACA,cAAIsG,eAAeD,aAAnB;;AAEA,cAAIE,YAAY,EAAhB;;AAEA,cAAIhB,MAAJ;;AAEA,eAAK,IAAIV,IAAE,CAAX,EAAcA,IAAE9C,YAAY/B,OAA5B,EAAqC6E,GAArC,EACA;AACE,gBAAI2B,MAAMzE,YAAYhC,MAAZ,GAAmB8E,CAA7B;AACA,gBAAI4B,WAAWR,UAAUO,GAAV,CAAf;AACA,gBAAIE,UAAU,KAAKtE,aAAL,CAAmBoE,GAAnB,CAAd;;AAEA;AACA,gBAAIE,UAAU,CAAd,EACA;AACEH,wBAAUC,GAAV,IACA;AACEzB,qBAAM0B,SAASzD,QADjB;AAEEpE,uBAAQ6H,SAAS5D,KAFnB;AAGEtC,qBAAMkG,SAAShE,QAHjB;AAIEN,sBAAMuE;AAJR,eADA;AAOD;;AAEDL,6BAAiBI,SAAS5D,KAA1B;AACAyD,4BAAgBG,SAASzD,QAAzB;AACD;;AAED;AACA;AACA,cAAIqD,gBAAgBzC,KAAKf,KAAzB,EACA;AACE,gBAAI8D,gBAAgBlK,GAAGO,EAAH,CAAMC,MAAN,CAAamI,IAAb,CAAkBC,kBAAlB,CAClBkB,SADkB,EACP3C,KAAKf,KADE,EACKwD,aADL,CAApB;;AAIA,iBAAK,IAAIxB,IAAE,CAAX,EAAcA,IAAE9C,YAAY/B,OAA5B,EAAqC6E,GAArC,EACA;AACEU,uBAASoB,cAAcP,eAAavB,CAA3B,IAAgC8B,cAAcP,eAAavB,CAA3B,EAA8BU,MAA9D,GAAuE,CAAhF;AACAU,wBAAUG,eAAavB,CAAvB,EAA0BhC,KAA1B,IAAmC0C,MAAnC;AACD;AACF;;AAED;AACA;AACA,cAAIe,eAAe1C,KAAKZ,QAAxB,EACA;AACE,gBAAI2D,gBAAgBlK,GAAGO,EAAH,CAAMC,MAAN,CAAamI,IAAb,CAAkBC,kBAAlB,CAClBkB,SADkB,EACP3C,KAAKZ,QADE,EACQsD,YADR,CAApB;;AAIA,iBAAK,IAAIzB,IAAE,CAAX,EAAcA,IAAE9C,YAAY/B,OAA5B,EAAqC6E,GAArC,EACA;AACEU,uBAASoB,cAAcP,eAAavB,CAA3B,IAAgC8B,cAAcP,eAAavB,CAA3B,EAA8BU,MAA9D,GAAuE,CAAhF;AACAU,wBAAUG,eAAavB,CAAvB,EAA0B7B,QAA1B,IAAsCuC,MAAtC;AACD;AACF;AACF;AACF,OAn2BH;;AAs2BE;;;;;;;AAOAqB,sBAAiB,0BACjB;AACE,YAAI,KAAKxI,YAAL,IAAqB,IAAzB,EAA+B;AAC7B,iBAAO,KAAKA,YAAZ;AACD;;AAED,YAAIkG,aAAa,EAAjB;;AAEA,YAAIlF,cAAc,KAAKlB,aAAvB;AACA,YAAImB,cAAc,KAAKlB,aAAvB;;AAEA,aAAK,IAAI2B,MAAI,CAAb,EAAgBA,OAAKV,WAArB,EAAkCU,KAAlC,EACA;AACE,cAAI2D,YAAY,CAAhB;AACA,cAAIH,SAAS,CAAb;AACA,cAAIH,YAAY,CAAhB;;AAEA,eAAK,IAAIqD,MAAI,CAAb,EAAgBA,OAAKnH,WAArB,EAAkCmH,KAAlC,EACA;AACE,gBAAI1E,SAAS,KAAK/D,MAAL,CAAY+B,GAAZ,EAAiB0G,GAAjB,CAAb;AACA,gBAAI,CAAC1E,MAAL,EAAa;AACX;AACD;;AAED;AACA;AACA,gBAAI+E,gBAAgB/E,OAAOjC,mBAAP,GAA6BI,OAA7B,IAAwC,CAA5D;AACA,gBAAI4G,gBAAgB,CAApB,EAAuB;AACrB;AACD;;AAED,gBAAIC,WAAW,KAAKnD,cAAL,CAAoB7B,MAApB,CAAf;;AAEA,gBAAI,KAAKQ,UAAL,CAAgBxC,GAAhB,IAAuB,CAA3B,EAA8B;AAC5B2D,0BAAYnD,KAAKC,GAAL,CAASkD,SAAT,EAAoBqD,SAASrD,SAA7B,CAAZ;AACD,aAFD,MAEO;AACLA,0BAAYnD,KAAKC,GAAL,CAASkD,SAAT,EAAoBqD,SAASxD,MAA7B,CAAZ;AACD;;AAEDA,qBAAShD,KAAKC,GAAL,CAAS+C,MAAT,EAAiBwD,SAASxD,MAA1B,CAAT;AACD;;AAED,cAAIG,YAAYnD,KAAKC,GAAL,CAASkD,SAAT,EAAoB,KAAKC,eAAL,CAAqB5D,GAArB,CAApB,CAAhB;AACA,cAAIqD,YAAY,KAAKC,eAAL,CAAqBtD,GAArB,CAAhB;;AAEA,cAAI,KAAKyD,YAAL,CAAkBzD,GAAlB,MAA2B,IAA/B,EAAqC;AACnC,gBAAIwD,SAAS,KAAKC,YAAL,CAAkBzD,GAAlB,CAAb;AACD,WAFD,MAEO;AACL,gBAAIwD,SAAShD,KAAKC,GAAL,CAASkD,SAAT,EAAoBnD,KAAKyE,GAAL,CAASzB,MAAT,EAAiBH,SAAjB,CAApB,CAAb;AACD;;AAEDmB,qBAAWxE,GAAX,IAAkB;AAChB2D,uBAAYA,SADI;AAEhBH,oBAASA,MAFO;AAGhBH,uBAAYA;AAHI,WAAlB;AAKD;;AAED,YAAI,KAAKlF,UAAL,CAAgByB,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,eAAK2E,kBAAL,CAAwBC,UAAxB;AACD;;AAED,aAAKlG,YAAL,GAAoBkG,UAApB;AACA,eAAOA,UAAP;AACD,OA76BH;;AAg7BE;;;;;;;AAOAyC,qBAAgB,yBAChB;AACE,YAAI,KAAK1I,WAAL,IAAoB,IAAxB,EAA8B;AAC5B,iBAAO,KAAKA,WAAZ;AACD;;AAED,YAAI4H,YAAY,EAAhB;;AAEA,YAAI5G,cAAc,KAAKlB,aAAvB;AACA,YAAIiB,cAAc,KAAKlB,aAAvB;;AAEA,aAAK,IAAIsI,MAAI,CAAb,EAAgBA,OAAKnH,WAArB,EAAkCmH,KAAlC,EACA;AACE,cAAI3D,QAAQ,CAAZ;AACA,cAAIG,WAAW,CAAf;AACA,cAAIP,WAAWE,QAAf;;AAEA,eAAK,IAAI7C,MAAI,CAAb,EAAgBA,OAAKV,WAArB,EAAkCU,KAAlC,EACA;AACE,gBAAIgC,SAAS,KAAK/D,MAAL,CAAY+B,GAAZ,EAAiB0G,GAAjB,CAAb;AACA,gBAAI,CAAC1E,MAAL,EAAa;AACX;AACD;;AAED;AACA;AACA,gBAAIkF,gBAAgBlF,OAAOjC,mBAAP,GAA6BG,OAA7B,IAAwC,CAA5D;AACA,gBAAIgH,gBAAgB,CAApB,EAAuB;AACrB;AACD;;AAED,gBAAIF,WAAW,KAAKnD,cAAL,CAAoB7B,MAApB,CAAf;;AAEAkB,uBAAW1C,KAAKC,GAAL,CAASyC,QAAT,EAAmB8D,SAAS9D,QAA5B,CAAX;;AAEAH,oBAAQvC,KAAKC,GAAL,CAASsC,KAAT,EAAgBiE,SAASjE,KAAzB,CAAR;AACD;;AAEDG,qBAAW1C,KAAKC,GAAL,CAASyC,QAAT,EAAmB,KAAKC,iBAAL,CAAuBuD,GAAvB,CAAnB,CAAX;AACA/D,qBAAW,KAAKC,iBAAL,CAAuB8D,GAAvB,CAAX;;AAEA,cAAI,KAAK1D,cAAL,CAAoB0D,GAApB,MAA6B,IAAjC,EAAuC;AACrC,gBAAI3D,QAAQ,KAAKC,cAAL,CAAoB0D,GAApB,CAAZ;AACD,WAFD,MAEO;AACL,gBAAI3D,QAAQvC,KAAKC,GAAL,CAASyC,QAAT,EAAmB1C,KAAKyE,GAAL,CAASlC,KAAT,EAAgBJ,QAAhB,CAAnB,CAAZ;AACD;;AAEDwD,oBAAUO,GAAV,IAAiB;AACfxD,sBAAUA,QADK;AAEfH,mBAAQA,KAFO;AAGfJ,sBAAWA;AAHI,WAAjB;AAKD;;AAED,YAAI,KAAKzE,UAAL,CAAgB0B,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,eAAKsG,iBAAL,CAAuBC,SAAvB;AACD;;AAED,aAAK5H,WAAL,GAAmB4H,SAAnB;AACA,eAAOA,SAAP;AACD,OAn/BH;;AAs/BE;;;;;;;;AAQAgB,6BAAwB,+BAASpE,KAAT,EACxB;AACE,YAAIe,OAAO,KAAKC,WAAL,EAAX;AACA,YAAIqD,OAAOrE,QAAQe,KAAKf,KAAxB;;AAEA,YAAIqE,QAAQ,CAAZ,EAAe;AACb,iBAAO,EAAP;AACD;;AAED;AACA,YAAIjB,YAAY,KAAKc,aAAL,EAAhB;AACA,YAAII,YAAY,EAAhB;;AAEA,aAAK,IAAI3H,IAAE,CAAN,EAASC,IAAEwG,UAAUvG,MAA1B,EAAkCF,IAAEC,CAApC,EAAuCD,GAAvC,EACA;AACE,cAAIgH,MAAMP,UAAUzG,CAAV,CAAV;AACA,cAAIkH,UAAU,KAAKtE,aAAL,CAAmB5C,CAAnB,CAAd;;AAEA,cACGkH,WAAW,CAAZ,IACCF,IAAI3D,KAAJ,IAAa2D,IAAI/D,QAAjB,IAA6ByE,OAAO,CADrC,IAECV,IAAI3D,KAAJ,IAAa2D,IAAIxD,QAAjB,IAA6BkE,OAAO,CAHvC,EAIE;AACA;AACD;;AAEDC,oBAAU3H,CAAV,IAAc;AACZuF,iBAAMyB,IAAIxD,QADE;AAEZpE,mBAAQ4H,IAAI3D,KAFA;AAGZtC,iBAAMiG,IAAI/D,QAHE;AAIZN,kBAAOuE;AAJK,WAAd;AAMD;;AAED,eAAOjK,GAAGO,EAAH,CAAMC,MAAN,CAAamI,IAAb,CAAkBC,kBAAlB,CAAqC8B,SAArC,EAAgDtE,KAAhD,EAAuDe,KAAKf,KAA5D,CAAP;AACD,OAjiCH;;AAoiCE;;;;;;;;AAQAuE,0BAAqB,4BAAS9D,MAAT,EACrB;AACE,YAAIM,OAAO,KAAKC,WAAL,EAAX;AACA,YAAIqD,OAAO5D,SAASM,KAAKN,MAAzB;;AAEA,YAAI4D,QAAQ,CAAZ,EAAe;AACb,iBAAO,EAAP;AACD;;AAED;AACA,YAAI5C,aAAa,KAAKsC,cAAL,EAAjB;AACA,YAAIO,YAAY,EAAhB;;AAEA,aAAK,IAAI3H,IAAE,CAAN,EAASC,IAAE6E,WAAW5E,MAA3B,EAAmCF,IAAEC,CAArC,EAAwCD,GAAxC,EACA;AACE,cAAIM,MAAMwE,WAAW9E,CAAX,CAAV;AACA,cAAI+C,UAAU,KAAKD,UAAL,CAAgB9C,CAAhB,CAAd;;AAEA,cACG+C,WAAW,CAAZ,IACCzC,IAAIwD,MAAJ,IAAcxD,IAAIqD,SAAlB,IAA+B+D,OAAO,CADvC,IAECpH,IAAIwD,MAAJ,IAAcxD,IAAI2D,SAAlB,IAA+ByD,OAAO,CAHzC,EAIE;AACA;AACD;;AAEDC,oBAAU3H,CAAV,IAAe;AACbuF,iBAAMjF,IAAI2D,SADG;AAEb7E,mBAAQkB,IAAIwD,MAFC;AAGb/C,iBAAMT,IAAIqD,SAHG;AAIbhB,kBAAOI;AAJM,WAAf;AAMD;;AAED,eAAO9F,GAAGO,EAAH,CAAMC,MAAN,CAAamI,IAAb,CAAkBC,kBAAlB,CAAqC8B,SAArC,EAAgD7D,MAAhD,EAAwDM,KAAKN,MAA7D,CAAP;AACD,OA/kCH;;AAklCE;AACA+D,oBAAe,sBAASC,UAAT,EAAqBC,WAArB,EAAkCC,OAAlC,EACf;AACE,YAAI,KAAK/G,qBAAT,EAAgC;AAC9B,eAAKzB,WAAL;AACD;;AAED,YAAIoG,OAAO3I,GAAGO,EAAH,CAAMC,MAAN,CAAamI,IAAxB;AACA,YAAIc,WAAW,KAAKC,WAAL,EAAf;AACA,YAAI5B,WAAW,KAAKC,WAAL,EAAf;;AAEA;AACA,YAAIiD,aAAa,KAAKV,aAAL,EAAjB;AACA,YAAIW,oBAAoB,KAAKT,qBAAL,CAA2BK,UAA3B,CAAxB;;AAEA,YAAIrB,YAAY,EAAhB;;AAEA,YAAI5G,cAAc,KAAKlB,aAAvB;AACA,YAAIiB,cAAc,KAAKlB,aAAvB;;AAEA,YAAIqH,MAAJ;;AAEA,aAAK,IAAIiB,MAAI,CAAb,EAAgBA,OAAKnH,WAArB,EAAkCmH,KAAlC,EACA;AACEjB,mBAASmC,kBAAkBlB,GAAlB,IAAyBkB,kBAAkBlB,GAAlB,EAAuBjB,MAAhD,GAAyD,CAAlE;AACAU,oBAAUO,GAAV,IAAiBiB,WAAWjB,GAAX,EAAgB3D,KAAhB,GAAwB0C,MAAzC;AACD;;AAED;AACA,YAAIoC,cAAc,KAAKf,cAAL,EAAlB;AACA,YAAIgB,oBAAoB,KAAKR,kBAAL,CAAwBG,WAAxB,CAAxB;;AAEA,YAAIjD,aAAa,EAAjB;;AAEA,aAAK,IAAIxE,MAAI,CAAb,EAAgBA,OAAKV,WAArB,EAAkCU,KAAlC,EACA;AACEyF,mBAASqC,kBAAkB9H,GAAlB,IAAyB8H,kBAAkB9H,GAAlB,EAAuByF,MAAhD,GAAyD,CAAlE;AACAjB,qBAAWxE,GAAX,IAAkB6H,YAAY7H,GAAZ,EAAiBwD,MAAjB,GAA0BiC,MAA5C;AACD;;AAED;AACA,YAAIsC,OAAO,CAAX;AACA,aAAK,IAAIrB,MAAI,CAAb,EAAgBA,OAAKnH,WAArB,EAAkCmH,KAAlC,EACA;AACE,cAAIsB,MAAM,CAAV;;AAEA,eAAK,IAAIhI,MAAI,CAAb,EAAgBA,OAAKV,WAArB,EAAkCU,KAAlC,EACA;AACE,gBAAIgC,SAAS,KAAK/D,MAAL,CAAY+B,GAAZ,EAAiB0G,GAAjB,CAAb;;AAEA;AACA,gBAAI,CAAC1E,MAAL,EACA;AACEgG,qBAAOxD,WAAWxE,GAAX,IAAkByE,QAAzB;AACA;AACD;;AAED,gBAAIxC,cAAcD,OAAOjC,mBAAP,EAAlB;;AAEA;AACA;AACA,gBAAGkC,YAAYjC,GAAZ,KAAoBA,GAApB,IAA2BiC,YAAYhC,MAAZ,KAAuByG,GAArD,EACA;AACEsB,qBAAOxD,WAAWxE,GAAX,IAAkByE,QAAzB;AACA;AACD;;AAED;AACA,gBAAIwD,YAAY7B,YAAYnE,YAAY/B,OAAZ,GAAsB,CAAlC,CAAhB;AACA,iBAAK,IAAIR,IAAE,CAAX,EAAcA,IAAEuC,YAAY/B,OAA5B,EAAqCR,GAArC,EAA0C;AACxCuI,2BAAa9B,UAAUO,MAAIhH,CAAd,CAAb;AACD;;AAED,gBAAIwI,aAAazD,YAAYxC,YAAY9B,OAAZ,GAAsB,CAAlC,CAAjB;AACA,iBAAK,IAAIT,IAAE,CAAX,EAAcA,IAAEuC,YAAY9B,OAA5B,EAAqCT,GAArC,EAA0C;AACxCwI,4BAAc1D,WAAWxE,MAAIN,CAAf,CAAd;AACD;;AAED,gBAAIyI,WAAWnG,OAAO+B,WAAP,EAAf;AACA,gBAAIqE,YAAYpG,OAAOoC,YAAP,EAAhB;AACA,gBAAIiE,aAAarG,OAAOiC,aAAP,EAAjB;AACA,gBAAIqE,eAAetG,OAAOqC,eAAP,EAAnB;AACA,gBAAIkE,cAAcvG,OAAOkC,cAAP,EAAlB;;AAEA,gBAAIsE,YAAYhI,KAAKC,GAAL,CAAS0H,SAASjF,QAAlB,EAA4B1C,KAAKyE,GAAL,CAASgD,YAAUI,UAAV,GAAqBE,WAA9B,EAA2CJ,SAASxF,QAApD,CAA5B,CAAhB;AACA,gBAAI8F,aAAajI,KAAKC,GAAL,CAAS0H,SAASxE,SAAlB,EAA6BnD,KAAKyE,GAAL,CAASiD,aAAWE,SAAX,GAAqBE,YAA9B,EAA4CH,SAAS9E,SAArD,CAA7B,CAAjB;;AAEA,gBAAIqF,YAAY,KAAK3G,YAAL,CAAkB/B,GAAlB,EAAuB0G,GAAvB,CAAhB;AACA,gBAAIiC,WAAWZ,OAAOzC,KAAKsD,4BAAL,CAAkCF,UAAUtH,MAA5C,EAAoDoH,SAApD,EAA+DP,SAA/D,EAA0EI,UAA1E,EAAsFE,WAAtF,CAAtB;AACA,gBAAIM,UAAUb,MAAM1C,KAAKwD,0BAAL,CAAgCJ,UAAUrH,MAA1C,EAAkDoH,UAAlD,EAA8DP,UAA9D,EAA0EE,SAA1E,EAAqFE,YAArF,CAApB;;AAEAtG,mBAAOuF,YAAP,CACEoB,WAAWjB,QAAQK,IADrB,EAEEc,UAAUnB,QAAQM,GAFpB,EAGEQ,SAHF,EAIEC,UAJF;;AAOAT,mBAAOxD,WAAWxE,GAAX,IAAkByE,QAAzB;AACD;;AAEDsD,kBAAQ5B,UAAUO,GAAV,IAAiBN,QAAzB;AACD;AACF,OAzrCH;;AA4rCE;AACA2C,6BAAwB,iCACxB;AACE;;AAEA,aAAKxK,WAAL,GAAmB,IAAnB;AACA,aAAKD,YAAL,GAAoB,IAApB;AACD,OAnsCH;;AAssCE;AACA0K,wBAAmB,4BACnB;AACE,YAAI,KAAKrI,qBAAT,EAAgC;AAC9B,eAAKzB,WAAL;AACD;;AAED;AACA,YAAIiH,YAAY,KAAKc,aAAL,EAAhB;;AAEA,YAAI/D,WAAS,CAAb;AAAA,YAAgBH,QAAM,CAAtB;;AAEA,aAAK,IAAIrD,IAAE,CAAN,EAASC,IAAEwG,UAAUvG,MAA1B,EAAkCF,IAAEC,CAApC,EAAuCD,GAAvC,EACA;AACE,cAAIgH,MAAMP,UAAUzG,CAAV,CAAV;AACA,cAAI,KAAK4C,aAAL,CAAmB5C,CAAnB,IAAwB,CAA5B,EAA+B;AAC7BwD,wBAAYwD,IAAIxD,QAAhB;AACD,WAFD,MAEO;AACLA,wBAAYwD,IAAI3D,KAAhB;AACD;;AAEDA,mBAAS2D,IAAI3D,KAAb;AACD;;AAED;AACA,YAAIyB,aAAa,KAAKsC,cAAL,EAAjB;;AAEA,YAAInD,YAAU,CAAd;AAAA,YAAiBH,SAAO,CAAxB;AACA,aAAK,IAAI9D,IAAE,CAAN,EAASC,IAAE6E,WAAW5E,MAA3B,EAAmCF,IAAEC,CAArC,EAAwCD,GAAxC,EACA;AACE,cAAIM,MAAMwE,WAAW9E,CAAX,CAAV;;AAEA,cAAI,KAAK8C,UAAL,CAAgB9C,CAAhB,IAAqB,CAAzB,EAA4B;AAC1BiE,yBAAa3D,IAAI2D,SAAjB;AACD,WAFD,MAEO;AACLA,yBAAa3D,IAAIwD,MAAjB;AACD;;AAEDA,oBAAUxD,IAAIwD,MAAd;AACD;;AAED,YAAIlG,WAAW,KAAK+I,WAAL,MAAsBF,UAAUvG,MAAV,GAAmB,CAAzC,CAAf;AACA,YAAIrC,WAAW,KAAKmH,WAAL,MAAsBF,WAAW5E,MAAX,GAAoB,CAA1C,CAAf;;AAEA,YAAIkE,OAAO;AACTZ,oBAAWA,WAAW5F,QADb;AAETyF,iBAAQA,QAAQzF,QAFP;AAGTqG,qBAAYA,YAAYpG,QAHf;AAITiG,kBAASA,SAASjG;AAJT,SAAX;;AAOA,eAAOuG,IAAP;AACD;AA1vCH,KA/EF;;AA+0CE;;;;;;AAMAmF,cAAW,oBACX;AACE,WAAKhL,MAAL,GAAc,KAAKT,SAAL,GAAiB,KAAKC,SAAL,GAAiB,KAAKS,UAAL,GAC9C,KAAKC,UAAL,GAAkB,KAAKI,WAAL,GAAmB,KAAKD,YAAL,GAAoB,IAD3D;AAED;AAz1CH,GADA,C;AA3EA3B,KAAGO,EAAH,CAAMC,MAAN,CAAa+L,IAAb,CAAkBpM,aAAlB,GAAkCA,aAAlC",
  "file": "Grid.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The grid layout manager arranges the items in a two dimensional\n * grid. Widgets can be placed into the grid's cells and may span multiple rows\n * and columns.\n *\n * *Features*\n *\n * * Flex values for rows and columns\n * * Minimal and maximal column and row sizes\n * * Manually setting of column and row sizes\n * * Horizontal and vertical alignment\n * * Horizontal and vertical spacing\n * * Column and row spans\n * * Auto-sizing\n *\n * *Item Properties*\n *\n * <ul>\n * <li><strong>row</strong> <em>(Integer)</em>: The row of the cell the\n *   widget should occupy. Each cell can only containing one widget. This layout\n *   property is mandatory.\n * </li>\n * <li><strong>column</strong> <em>(Integer)</em>: The column of the cell the\n *   widget should occupy. Each cell can only containing one widget. This layout\n *   property is mandatory.\n * </li>\n * <li><strong>rowSpan</strong> <em>(Integer)</em>: The number of rows, the\n *   widget should span, starting from the row specified in the <code>row</code>\n *   property. The cells in the spanned rows must be empty as well.\n * </li>\n * <li><strong>colSpan</strong> <em>(Integer)</em>: The number of columns, the\n *   widget should span, starting from the column specified in the <code>column</code>\n *   property. The cells in the spanned columns must be empty as well.\n * </li>\n * </ul>\n *\n * *Example*\n *\n * Here is a little example of how to use the grid layout.\n *\n * <pre class=\"javascript\">\n * var layout = new qx.ui.layout.Grid();\n * layout.setRowFlex(0, 1); // make row 0 flexible\n * layout.setColumnWidth(1, 200); // set with of column 1 to 200 pixel\n *\n * var container = new qx.ui.container.Composite(layout);\n * container.add(new qx.ui.core.Widget(), {row: 0, column: 0});\n * container.add(new qx.ui.core.Widget(), {row: 0, column: 1});\n * container.add(new qx.ui.core.Widget(), {row: 1, column: 0, rowSpan: 2});\n * </pre>\n *\n * *External Documentation*\n *\n * <a href='http://manual.qooxdoo.org/${qxversion}/pages/layout/grid.html'>\n * Extended documentation</a> and links to demos of this layout in the qooxdoo manual.\n */\nqx.Class.define(\"qx.ui.layout.Grid\",\n{\n  extend : qx.ui.layout.Abstract,\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param spacingX {Integer?0} The horizontal spacing between grid cells.\n   *     Sets {@link #spacingX}.\n   * @param spacingY {Integer?0} The vertical spacing between grid cells.\n   *     Sets {@link #spacingY}.\n   */\n  construct : function(spacingX, spacingY)\n  {\n    this.base(arguments);\n\n    this.__rowData = [];\n    this.__colData = [];\n\n    if (spacingX) {\n      this.setSpacingX(spacingX);\n    }\n\n    if (spacingY) {\n      this.setSpacingY(spacingY);\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * The horizontal spacing between grid cells.\n     */\n    spacingX :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /**\n     * The vertical spacing between grid cells.\n     */\n    spacingY :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyLayoutChange\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /** @type {Array} 2D array of grid cell data */\n    __grid : null,\n    __rowData : null,\n    __colData : null,\n\n    __colSpans : null,\n    __rowSpans : null,\n    __maxRowIndex : null,\n    __maxColIndex : null,\n\n    /** @type {Array} cached row heights */\n    __rowHeights : null,\n\n    /** @type {Array} cached column widths */\n    __colWidths : null,\n\n\n\n    // overridden\n    verifyLayoutProperty : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\" : function(item, name, value)\n      {\n        var layoutProperties = {\n          \"row\" : 1,\n          \"column\" : 1,\n          \"rowSpan\" : 1,\n          \"colSpan\" : 1\n        };\n        this.assert(layoutProperties[name] == 1, \"The property '\"+name+\"' is not supported by the Grid layout!\");\n        this.assertInteger(value);\n        this.assert(value >= 0, \"Value must be positive\");\n      },\n\n      \"false\" : null\n    }),\n\n\n    /**\n     * Rebuild the internal representation of the grid\n     */\n    __buildGrid : function()\n    {\n      var grid = [];\n      var colSpans = [];\n      var rowSpans = [];\n\n      var maxRowIndex = -1;\n      var maxColIndex = -1;\n\n      var children = this._getLayoutChildren();\n\n      for (var i=0,l=children.length; i<l; i++)\n      {\n        var child = children[i];\n        var props = child.getLayoutProperties();\n\n        var row = props.row;\n        var column = props.column;\n\n        props.colSpan = props.colSpan || 1;\n        props.rowSpan = props.rowSpan || 1;\n\n        // validate arguments\n        if (row == null || column == null) {\n          throw new Error(\n            \"The layout properties 'row' and 'column' of the child widget '\" +\n            child + \"' must be defined!\"\n          );\n        }\n\n        if (grid[row] && grid[row][column]) {\n          throw new Error(\n            \"Cannot add widget '\" + child + \"'!. \" +\n            \"There is already a widget '\" + grid[row][column] +\n            \"' in this cell (\" + row + \", \" + column + \") for '\" + this + \"'\"\n          );\n        }\n\n        for (var x=column; x<column+props.colSpan; x++)\n        {\n          for (var y=row; y<row+props.rowSpan; y++)\n          {\n            if (grid[y] == undefined) {\n               grid[y] = [];\n            }\n\n            grid[y][x] = child;\n\n            maxColIndex = Math.max(maxColIndex, x);\n            maxRowIndex = Math.max(maxRowIndex, y);\n          }\n        }\n\n        if (props.rowSpan > 1) {\n          rowSpans.push(child);\n        }\n\n        if (props.colSpan > 1) {\n          colSpans.push(child);\n        }\n      }\n\n      // make sure all columns are defined so that accessing the grid using\n      // this.__grid[column][row] will never raise an exception\n      for (var y=0; y<=maxRowIndex; y++) {\n        if (grid[y] == undefined) {\n           grid[y] = [];\n        }\n      }\n\n      this.__grid = grid;\n\n      this.__colSpans = colSpans;\n      this.__rowSpans = rowSpans;\n\n      this.__maxRowIndex = maxRowIndex;\n      this.__maxColIndex = maxColIndex;\n\n      this.__rowHeights = null;\n      this.__colWidths = null;\n\n      // Clear invalidation marker\n      delete this._invalidChildrenCache;\n    },\n\n\n    /**\n     * Stores data for a grid row\n     *\n     * @param row {Integer} The row index\n     * @param key {String} The key under which the data should be stored\n     * @param value {var} data to store\n     */\n    _setRowData : function(row, key, value)\n    {\n      var rowData = this.__rowData[row];\n\n      if (!rowData)\n      {\n        this.__rowData[row] = {};\n        this.__rowData[row][key] = value;\n      }\n      else\n      {\n        rowData[key] = value;\n      }\n    },\n\n\n    /**\n     * Stores data for a grid column\n     *\n     * @param column {Integer} The column index\n     * @param key {String} The key under which the data should be stored\n     * @param value {var} data to store\n     */\n    _setColumnData : function(column, key, value)\n    {\n      var colData = this.__colData[column];\n\n      if (!colData)\n      {\n        this.__colData[column] = {};\n        this.__colData[column][key] = value;\n      }\n      else\n      {\n        colData[key] = value;\n      }\n    },\n\n\n    /**\n     * Shortcut to set both horizontal and vertical spacing between grid cells\n     * to the same value.\n     *\n     * @param spacing {Integer} new horizontal and vertical spacing\n     * @return {qx.ui.layout.Grid} This object (for chaining support).\n     */\n    setSpacing : function(spacing)\n    {\n      this.setSpacingY(spacing);\n      this.setSpacingX(spacing);\n      return this;\n    },\n\n\n    /**\n     * Set the default cell alignment for a column. This alignment can be\n     * overridden on a per cell basis by setting the cell's content widget's\n     * <code>alignX</code> and <code>alignY</code> properties.\n     *\n     * If on a grid cell both row and a column alignment is set, the horizontal\n     * alignment is taken from the column and the vertical alignment is taken\n     * from the row.\n     *\n     * @param column {Integer} Column index\n     * @param hAlign {String} The horizontal alignment. Valid values are\n     *    \"left\", \"center\" and \"right\".\n     * @param vAlign {String} The vertical alignment. Valid values are\n     *    \"top\", \"middle\", \"bottom\"\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnAlign : function(column, hAlign, vAlign)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(column, \"Invalid parameter 'column'\");\n        this.assertInArray(hAlign, [\"left\", \"center\", \"right\"]);\n        this.assertInArray(vAlign, [\"top\", \"middle\", \"bottom\"]);\n      }\n\n      this._setColumnData(column, \"hAlign\", hAlign);\n      this._setColumnData(column, \"vAlign\", vAlign);\n\n      this._applyLayoutChange();\n\n      return this;\n    },\n\n\n    /**\n     * Get a map of the column's alignment.\n     *\n     * @param column {Integer} The column index\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     *     containing the vertical and horizontal column alignment.\n     */\n    getColumnAlign : function(column)\n    {\n      var colData = this.__colData[column] || {};\n\n      return {\n        vAlign : colData.vAlign || \"top\",\n        hAlign : colData.hAlign || \"left\"\n      };\n    },\n\n\n    /**\n     * Set the default cell alignment for a row. This alignment can be\n     * overridden on a per cell basis by setting the cell's content widget's\n     * <code>alignX</code> and <code>alignY</code> properties.\n     *\n     * If on a grid cell both row and a column alignment is set, the horizontal\n     * alignment is taken from the column and the vertical alignment is taken\n     * from the row.\n     *\n     * @param row {Integer} Row index\n     * @param hAlign {String} The horizontal alignment. Valid values are\n     *    \"left\", \"center\" and \"right\".\n     * @param vAlign {String} The vertical alignment. Valid values are\n     *    \"top\", \"middle\", \"bottom\"\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowAlign : function(row, hAlign, vAlign)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(row, \"Invalid parameter 'row'\");\n        this.assertInArray(hAlign, [\"left\", \"center\", \"right\"]);\n        this.assertInArray(vAlign, [\"top\", \"middle\", \"bottom\"]);\n      }\n\n      this._setRowData(row, \"hAlign\", hAlign);\n      this._setRowData(row, \"vAlign\", vAlign);\n\n      this._applyLayoutChange();\n\n      return this;\n    },\n\n\n    /**\n     * Get a map of the row's alignment.\n     *\n     * @param row {Integer} The Row index\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     *     containing the vertical and horizontal row alignment.\n     */\n    getRowAlign : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n\n      return {\n        vAlign : rowData.vAlign || \"top\",\n        hAlign : rowData.hAlign || \"left\"\n      };\n    },\n\n\n    /**\n     * Get the widget located in the cell. If a the cell is empty or the widget\n     * has a {@link qx.ui.core.Widget#visibility} value of <code>exclude</code>,\n     * <code>null</code> is returned.\n     *\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @return {qx.ui.core.Widget|null}The cell's widget. The value may be null.\n     */\n    getCellWidget : function(row, column)\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      var row = this.__grid[row] || {};\n      return row[column] ||  null;\n    },\n\n\n    /**\n     * Get the number of rows in the grid layout.\n     *\n     * @return {Integer} The number of rows in the layout\n     */\n    getRowCount : function()\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      return this.__maxRowIndex + 1;\n    },\n\n\n    /**\n     * Get the number of columns in the grid layout.\n     *\n     * @return {Integer} The number of columns in the layout\n     */\n    getColumnCount : function()\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      return this.__maxColIndex + 1;\n    },\n\n\n    /**\n     * Get a map of the cell's alignment. For vertical alignment the row alignment\n     * takes precedence over the column alignment. For horizontal alignment it is\n     * the over way round. If an alignment is set on the cell widget using\n     * {@link qx.ui.core.LayoutItem#setLayoutProperties}, this alignment takes\n     * always precedence over row or column alignment.\n     *\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     *     containing the vertical and horizontal cell alignment.\n     */\n    getCellAlign : function(row, column)\n    {\n      var vAlign = \"top\";\n      var hAlign = \"left\";\n\n      var rowData = this.__rowData[row];\n      var colData = this.__colData[column];\n\n      var widget = this.__grid[row][column];\n      if (widget)\n      {\n        var widgetProps = {\n          vAlign : widget.getAlignY(),\n          hAlign : widget.getAlignX()\n        };\n      }\n      else\n      {\n        widgetProps = {};\n      }\n\n      // compute vAlign\n      // precedence : widget -> row -> column\n      if (widgetProps.vAlign) {\n        vAlign = widgetProps.vAlign;\n      } else if (rowData && rowData.vAlign) {\n        vAlign = rowData.vAlign;\n      } else if (colData && colData.vAlign) {\n        vAlign = colData.vAlign;\n      }\n\n      // compute hAlign\n      // precedence : widget -> column -> row\n      if (widgetProps.hAlign) {\n        hAlign = widgetProps.hAlign;\n      } else if (colData && colData.hAlign) {\n        hAlign = colData.hAlign;\n      } else if (rowData && rowData.hAlign) {\n        hAlign = rowData.hAlign;\n      }\n\n      return {\n        vAlign : vAlign,\n        hAlign : hAlign\n      };\n    },\n\n\n    /**\n     * Set the flex value for a grid column.\n     * By default the column flex value is <code>0</code>.\n     *\n     * @param column {Integer} The column index\n     * @param flex {Integer} The column's flex value\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnFlex : function(column, flex)\n    {\n      this._setColumnData(column, \"flex\", flex);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the flex value of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's flex value\n     */\n    getColumnFlex : function(column)\n    {\n      var colData = this.__colData[column] || {};\n      return colData.flex !== undefined ? colData.flex : 0;\n    },\n\n\n    /**\n     * Set the flex value for a grid row.\n     * By default the row flex value is <code>0</code>.\n     *\n     * @param row {Integer} The row index\n     * @param flex {Integer} The row's flex value\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowFlex : function(row, flex)\n    {\n      this._setRowData(row, \"flex\", flex);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the flex value of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's flex value\n     */\n    getRowFlex : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n      var rowFlex = rowData.flex !== undefined ? rowData.flex : 0;\n      return rowFlex;\n    },\n\n\n    /**\n     * Set the maximum width of a grid column.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param column {Integer} The column index\n     * @param maxWidth {Integer} The column's maximum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnMaxWidth : function(column, maxWidth)\n    {\n      this._setColumnData(column, \"maxWidth\", maxWidth);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the maximum width of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's maximum width\n     */\n    getColumnMaxWidth : function(column)\n    {\n      var colData = this.__colData[column] || {};\n      return colData.maxWidth !== undefined ? colData.maxWidth : Infinity;\n    },\n\n\n    /**\n     * Set the preferred width of a grid column.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param column {Integer} The column index\n     * @param width {Integer} The column's width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnWidth : function(column, width)\n    {\n      this._setColumnData(column, \"width\", width);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the preferred width of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's width\n     */\n    getColumnWidth : function(column)\n    {\n      var colData = this.__colData[column] || {};\n      return colData.width !== undefined ? colData.width : null;\n    },\n\n\n    /**\n     * Set the minimum width of a grid column.\n     * The default value is <code>0</code>.\n     *\n     * @param column {Integer} The column index\n     * @param minWidth {Integer} The column's minimum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setColumnMinWidth : function(column, minWidth)\n    {\n      this._setColumnData(column, \"minWidth\", minWidth);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the minimum width of a grid column.\n     *\n     * @param column {Integer} The column index\n     * @return {Integer} The column's minimum width\n     */\n    getColumnMinWidth : function(column)\n    {\n      var colData = this.__colData[column] || {};\n      return colData.minWidth || 0;\n    },\n\n\n    /**\n     * Set the maximum height of a grid row.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param row {Integer} The row index\n     * @param maxHeight {Integer} The row's maximum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowMaxHeight : function(row, maxHeight)\n    {\n      this._setRowData(row, \"maxHeight\", maxHeight);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the maximum height of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's maximum width\n     */\n    getRowMaxHeight : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n      return rowData.maxHeight || Infinity;\n    },\n\n\n    /**\n     * Set the preferred height of a grid row.\n     * The default value is <code>Infinity</code>.\n     *\n     * @param row {Integer} The row index\n     * @param height {Integer} The row's width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowHeight : function(row, height)\n    {\n      this._setRowData(row, \"height\", height);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the preferred height of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's width\n     */\n    getRowHeight : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n      return rowData.height !== undefined ? rowData.height : null;\n    },\n\n\n    /**\n     * Set the minimum height of a grid row.\n     * The default value is <code>0</code>.\n     *\n     * @param row {Integer} The row index\n     * @param minHeight {Integer} The row's minimum width\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\n     */\n    setRowMinHeight : function(row, minHeight)\n    {\n      this._setRowData(row, \"minHeight\", minHeight);\n      this._applyLayoutChange();\n      return this;\n    },\n\n\n    /**\n     * Get the minimum height of a grid row.\n     *\n     * @param row {Integer} The row index\n     * @return {Integer} The row's minimum width\n     */\n    getRowMinHeight : function(row)\n    {\n      var rowData = this.__rowData[row] || {};\n      return rowData.minHeight || 0;\n    },\n\n\n    /**\n     * Computes the widget's size hint including the widget's margins\n     *\n     * @param widget {qx.ui.core.LayoutItem} The widget to get the size for\n     * @return {Map} a size hint map\n     */\n    __getOuterSize : function(widget)\n    {\n      var hint = widget.getSizeHint();\n      var hMargins = widget.getMarginLeft() + widget.getMarginRight();\n      var vMargins = widget.getMarginTop() + widget.getMarginBottom();\n\n      var outerSize = {\n        height: hint.height + vMargins,\n        width: hint.width + hMargins,\n        minHeight: hint.minHeight + vMargins,\n        minWidth: hint.minWidth + hMargins,\n        maxHeight: hint.maxHeight + vMargins,\n        maxWidth: hint.maxWidth + hMargins\n      };\n\n      return outerSize;\n    },\n\n\n    /**\n     * Check whether all row spans fit with their preferred height into the\n     * preferred row heights. If there is not enough space, the preferred\n     * row sizes are increased. The distribution respects the flex and max\n     * values of the rows.\n     *\n     *  The same is true for the min sizes.\n     *\n     *  The height array is modified in place.\n     *\n     * @param rowHeights {Map[]} The current row height array as computed by\n     *     {@link #_getRowHeights}.\n     */\n    _fixHeightsRowSpan : function(rowHeights)\n    {\n      var vSpacing = this.getSpacingY();\n\n      for (var i=0, l=this.__rowSpans.length; i<l; i++)\n      {\n        var widget = this.__rowSpans[i];\n\n        var hint = this.__getOuterSize(widget);\n\n        var widgetProps = widget.getLayoutProperties();\n        var widgetRow = widgetProps.row;\n\n        var prefSpanHeight = vSpacing * (widgetProps.rowSpan - 1);\n        var minSpanHeight = prefSpanHeight;\n\n        var rowFlexes = {};\n\n        for (var j=0; j<widgetProps.rowSpan; j++)\n        {\n          var row = widgetProps.row+j;\n          var rowHeight = rowHeights[row];\n          var rowFlex = this.getRowFlex(row);\n\n          if (rowFlex > 0)\n          {\n            // compute flex array for the preferred height\n            rowFlexes[row] =\n            {\n              min : rowHeight.minHeight,\n              value : rowHeight.height,\n              max : rowHeight.maxHeight,\n              flex: rowFlex\n            };\n          }\n\n          prefSpanHeight += rowHeight.height;\n          minSpanHeight += rowHeight.minHeight;\n        }\n\n        // If there is not enough space for the preferred size\n        // increment the preferred row sizes.\n        if (prefSpanHeight < hint.height)\n        {\n          if (!qx.lang.Object.isEmpty(rowFlexes)) {\n            var rowIncrements = qx.ui.layout.Util.computeFlexOffsets(\n              rowFlexes, hint.height, prefSpanHeight\n            );\n\n            for (var k=0; k<widgetProps.rowSpan; k++)\n            {\n              var offset = rowIncrements[widgetRow+k] ? rowIncrements[widgetRow+k].offset : 0;\n              rowHeights[widgetRow+k].height += offset;\n            }\n          // row is too small and we have no flex value set\n          } else {\n            var totalSpacing = vSpacing * (widgetProps.rowSpan - 1);\n            var availableHeight = hint.height - totalSpacing;\n\n            // get the row height which every child would need to share the\n            // available hight equally\n            var avgRowHeight =\n              Math.floor(availableHeight / widgetProps.rowSpan);\n\n            // get the hight already used and the number of children which do\n            // not have at least that avg row height\n            var usedHeight = 0;\n            var rowsNeedAddition = 0;\n            for (var k = 0; k < widgetProps.rowSpan; k++) {\n              var currentHeight = rowHeights[widgetRow + k].height;\n              usedHeight += currentHeight;\n              if (currentHeight < avgRowHeight) {\n                rowsNeedAddition++;\n              }\n            }\n\n            // the difference of available and used needs to be shared among\n            // those not having the min size\n            var additionalRowHeight =\n              Math.floor((availableHeight - usedHeight) / rowsNeedAddition);\n\n            // add the extra height to the too small children\n            for (var k = 0; k < widgetProps.rowSpan; k++) {\n              if (rowHeights[widgetRow + k].height < avgRowHeight) {\n                rowHeights[widgetRow + k].height += additionalRowHeight;\n              }\n            }\n          }\n        }\n\n        // If there is not enough space for the min size\n        // increment the min row sizes.\n        if (minSpanHeight < hint.minHeight)\n        {\n          var rowIncrements = qx.ui.layout.Util.computeFlexOffsets(\n            rowFlexes, hint.minHeight, minSpanHeight\n          );\n\n          for (var j=0; j<widgetProps.rowSpan; j++)\n          {\n            var offset = rowIncrements[widgetRow+j] ? rowIncrements[widgetRow+j].offset : 0;\n            rowHeights[widgetRow+j].minHeight += offset;\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Check whether all col spans fit with their preferred width into the\n     * preferred column widths. If there is not enough space the preferred\n     * column sizes are increased. The distribution respects the flex and max\n     * values of the columns.\n     *\n     *  The same is true for the min sizes.\n     *\n     *  The width array is modified in place.\n     *\n     * @param colWidths {Map[]} The current column width array as computed by\n     *     {@link #_getColWidths}.\n     */\n    _fixWidthsColSpan : function(colWidths)\n    {\n      var hSpacing = this.getSpacingX();\n\n      for (var i=0, l=this.__colSpans.length; i<l; i++)\n      {\n        var widget = this.__colSpans[i];\n\n        var hint = this.__getOuterSize(widget);\n\n        var widgetProps = widget.getLayoutProperties();\n        var widgetColumn = widgetProps.column;\n\n        var prefSpanWidth = hSpacing * (widgetProps.colSpan - 1);\n        var minSpanWidth = prefSpanWidth;\n\n        var colFlexes = {};\n\n        var offset;\n\n        for (var j=0; j<widgetProps.colSpan; j++)\n        {\n          var col = widgetProps.column+j;\n          var colWidth = colWidths[col];\n          var colFlex = this.getColumnFlex(col);\n\n          // compute flex array for the preferred width\n          if (colFlex > 0)\n          {\n            colFlexes[col] =\n            {\n              min : colWidth.minWidth,\n              value : colWidth.width,\n              max : colWidth.maxWidth,\n              flex: colFlex\n            };\n          }\n\n          prefSpanWidth += colWidth.width;\n          minSpanWidth += colWidth.minWidth;\n        }\n\n        // If there is not enough space for the preferred size\n        // increment the preferred column sizes.\n        if (prefSpanWidth < hint.width)\n        {\n          var colIncrements = qx.ui.layout.Util.computeFlexOffsets(\n            colFlexes, hint.width, prefSpanWidth\n          );\n\n          for (var j=0; j<widgetProps.colSpan; j++)\n          {\n            offset = colIncrements[widgetColumn+j] ? colIncrements[widgetColumn+j].offset : 0;\n            colWidths[widgetColumn+j].width += offset;\n          }\n        }\n\n        // If there is not enough space for the min size\n        // increment the min column sizes.\n        if (minSpanWidth < hint.minWidth)\n        {\n          var colIncrements = qx.ui.layout.Util.computeFlexOffsets(\n            colFlexes, hint.minWidth, minSpanWidth\n          );\n\n          for (var j=0; j<widgetProps.colSpan; j++)\n          {\n            offset = colIncrements[widgetColumn+j] ? colIncrements[widgetColumn+j].offset : 0;\n            colWidths[widgetColumn+j].minWidth += offset;\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Compute the min/pref/max row heights.\n     *\n     * @return {Map[]} An array containing height information for each row. The\n     *     entries have the keys <code>minHeight</code>, <code>maxHeight</code> and\n     *     <code>height</code>.\n     */\n    _getRowHeights : function()\n    {\n      if (this.__rowHeights != null) {\n        return this.__rowHeights;\n      }\n\n      var rowHeights = [];\n\n      var maxRowIndex = this.__maxRowIndex;\n      var maxColIndex = this.__maxColIndex;\n\n      for (var row=0; row<=maxRowIndex; row++)\n      {\n        var minHeight = 0;\n        var height = 0;\n        var maxHeight = 0;\n\n        for (var col=0; col<=maxColIndex; col++)\n        {\n          var widget = this.__grid[row][col];\n          if (!widget) {\n            continue;\n          }\n\n          // ignore rows with row spans at this place\n          // these rows will be taken into account later\n          var widgetRowSpan = widget.getLayoutProperties().rowSpan || 0;\n          if (widgetRowSpan > 1) {\n            continue;\n          }\n\n          var cellSize = this.__getOuterSize(widget);\n\n          if (this.getRowFlex(row) > 0) {\n            minHeight = Math.max(minHeight, cellSize.minHeight);\n          } else {\n            minHeight = Math.max(minHeight, cellSize.height);\n          }\n\n          height = Math.max(height, cellSize.height);\n        }\n\n        var minHeight = Math.max(minHeight, this.getRowMinHeight(row));\n        var maxHeight = this.getRowMaxHeight(row);\n\n        if (this.getRowHeight(row) !== null) {\n          var height = this.getRowHeight(row);\n        } else {\n          var height = Math.max(minHeight, Math.min(height, maxHeight));\n        }\n\n        rowHeights[row] = {\n          minHeight : minHeight,\n          height : height,\n          maxHeight : maxHeight\n        };\n      }\n\n      if (this.__rowSpans.length > 0) {\n        this._fixHeightsRowSpan(rowHeights);\n      }\n\n      this.__rowHeights = rowHeights;\n      return rowHeights;\n    },\n\n\n    /**\n     * Compute the min/pref/max column widths.\n     *\n     * @return {Map[]} An array containing width information for each column. The\n     *     entries have the keys <code>minWidth</code>, <code>maxWidth</code> and\n     *     <code>width</code>.\n     */\n    _getColWidths : function()\n    {\n      if (this.__colWidths != null) {\n        return this.__colWidths;\n      }\n\n      var colWidths = [];\n\n      var maxColIndex = this.__maxColIndex;\n      var maxRowIndex = this.__maxRowIndex;\n\n      for (var col=0; col<=maxColIndex; col++)\n      {\n        var width = 0;\n        var minWidth = 0;\n        var maxWidth = Infinity;\n\n        for (var row=0; row<=maxRowIndex; row++)\n        {\n          var widget = this.__grid[row][col];\n          if (!widget) {\n            continue;\n          }\n\n          // ignore columns with col spans at this place\n          // these columns will be taken into account later\n          var widgetColSpan = widget.getLayoutProperties().colSpan || 0;\n          if (widgetColSpan > 1) {\n            continue;\n          }\n\n          var cellSize = this.__getOuterSize(widget);\n\n          minWidth = Math.max(minWidth, cellSize.minWidth);\n\n          width = Math.max(width, cellSize.width);\n        }\n\n        minWidth = Math.max(minWidth, this.getColumnMinWidth(col));\n        maxWidth = this.getColumnMaxWidth(col);\n\n        if (this.getColumnWidth(col) !== null) {\n          var width = this.getColumnWidth(col);\n        } else {\n          var width = Math.max(minWidth, Math.min(width, maxWidth));\n        }\n\n        colWidths[col] = {\n          minWidth: minWidth,\n          width : width,\n          maxWidth : maxWidth\n        };\n      }\n\n      if (this.__colSpans.length > 0) {\n        this._fixWidthsColSpan(colWidths);\n      }\n\n      this.__colWidths = colWidths;\n      return colWidths;\n    },\n\n\n    /**\n     * Computes for each column by how many pixels it must grow or shrink, taking\n     * the column flex values and min/max widths into account.\n     *\n     * @param width {Integer} The grid width\n     * @return {Integer[]} Sparse array of offsets to add to each column width. If\n     *     an array entry is empty nothing should be added to the column.\n     */\n    _getColumnFlexOffsets : function(width)\n    {\n      var hint = this.getSizeHint();\n      var diff = width - hint.width;\n\n      if (diff == 0) {\n        return {};\n      }\n\n      // collect all flexible children\n      var colWidths = this._getColWidths();\n      var flexibles = {};\n\n      for (var i=0, l=colWidths.length; i<l; i++)\n      {\n        var col = colWidths[i];\n        var colFlex = this.getColumnFlex(i);\n\n        if (\n          (colFlex <= 0) ||\n          (col.width == col.maxWidth && diff > 0) ||\n          (col.width == col.minWidth && diff < 0)\n        ) {\n          continue;\n        }\n\n        flexibles[i] ={\n          min : col.minWidth,\n          value : col.width,\n          max : col.maxWidth,\n          flex : colFlex\n        };\n      }\n\n      return qx.ui.layout.Util.computeFlexOffsets(flexibles, width, hint.width);\n    },\n\n\n    /**\n     * Computes for each row by how many pixels it must grow or shrink, taking\n     * the row flex values and min/max heights into account.\n     *\n     * @param height {Integer} The grid height\n     * @return {Integer[]} Sparse array of offsets to add to each row height. If\n     *     an array entry is empty nothing should be added to the row.\n     */\n    _getRowFlexOffsets : function(height)\n    {\n      var hint = this.getSizeHint();\n      var diff = height - hint.height;\n\n      if (diff == 0) {\n        return {};\n      }\n\n      // collect all flexible children\n      var rowHeights = this._getRowHeights();\n      var flexibles = {};\n\n      for (var i=0, l=rowHeights.length; i<l; i++)\n      {\n        var row = rowHeights[i];\n        var rowFlex = this.getRowFlex(i);\n\n        if (\n          (rowFlex <= 0) ||\n          (row.height == row.maxHeight && diff > 0) ||\n          (row.height == row.minHeight && diff < 0)\n        ) {\n          continue;\n        }\n\n        flexibles[i] = {\n          min : row.minHeight,\n          value : row.height,\n          max : row.maxHeight,\n          flex : rowFlex\n        };\n      }\n\n      return qx.ui.layout.Util.computeFlexOffsets(flexibles, height, hint.height);\n    },\n\n\n    // overridden\n    renderLayout : function(availWidth, availHeight, padding)\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      var Util = qx.ui.layout.Util;\n      var hSpacing = this.getSpacingX();\n      var vSpacing = this.getSpacingY();\n\n      // calculate column widths\n      var prefWidths = this._getColWidths();\n      var colStretchOffsets = this._getColumnFlexOffsets(availWidth);\n\n      var colWidths = [];\n\n      var maxColIndex = this.__maxColIndex;\n      var maxRowIndex = this.__maxRowIndex;\n\n      var offset;\n\n      for (var col=0; col<=maxColIndex; col++)\n      {\n        offset = colStretchOffsets[col] ? colStretchOffsets[col].offset : 0;\n        colWidths[col] = prefWidths[col].width + offset;\n      }\n\n      // calculate row heights\n      var prefHeights = this._getRowHeights();\n      var rowStretchOffsets = this._getRowFlexOffsets(availHeight);\n\n      var rowHeights = [];\n\n      for (var row=0; row<=maxRowIndex; row++)\n      {\n        offset = rowStretchOffsets[row] ? rowStretchOffsets[row].offset : 0;\n        rowHeights[row] = prefHeights[row].height + offset;\n      }\n\n      // do the layout\n      var left = 0;\n      for (var col=0; col<=maxColIndex; col++)\n      {\n        var top = 0;\n\n        for (var row=0; row<=maxRowIndex; row++)\n        {\n          var widget = this.__grid[row][col];\n\n          // ignore empty cells\n          if (!widget)\n          {\n            top += rowHeights[row] + vSpacing;\n            continue;\n          }\n\n          var widgetProps = widget.getLayoutProperties();\n\n          // ignore cells, which have cell spanning but are not the origin\n          // of the widget\n          if(widgetProps.row !== row || widgetProps.column !== col)\n          {\n            top += rowHeights[row] + vSpacing;\n            continue;\n          }\n\n          // compute sizes width including cell spanning\n          var spanWidth = hSpacing * (widgetProps.colSpan - 1);\n          for (var i=0; i<widgetProps.colSpan; i++) {\n            spanWidth += colWidths[col+i];\n          }\n\n          var spanHeight = vSpacing * (widgetProps.rowSpan - 1);\n          for (var i=0; i<widgetProps.rowSpan; i++) {\n            spanHeight += rowHeights[row+i];\n          }\n\n          var cellHint = widget.getSizeHint();\n          var marginTop = widget.getMarginTop();\n          var marginLeft = widget.getMarginLeft();\n          var marginBottom = widget.getMarginBottom();\n          var marginRight = widget.getMarginRight();\n\n          var cellWidth = Math.max(cellHint.minWidth, Math.min(spanWidth-marginLeft-marginRight, cellHint.maxWidth));\n          var cellHeight = Math.max(cellHint.minHeight, Math.min(spanHeight-marginTop-marginBottom, cellHint.maxHeight));\n\n          var cellAlign = this.getCellAlign(row, col);\n          var cellLeft = left + Util.computeHorizontalAlignOffset(cellAlign.hAlign, cellWidth, spanWidth, marginLeft, marginRight);\n          var cellTop = top + Util.computeVerticalAlignOffset(cellAlign.vAlign, cellHeight, spanHeight, marginTop, marginBottom);\n\n          widget.renderLayout(\n            cellLeft + padding.left,\n            cellTop + padding.top,\n            cellWidth,\n            cellHeight\n          );\n\n          top += rowHeights[row] + vSpacing;\n        }\n\n        left += colWidths[col] + hSpacing;\n      }\n    },\n\n\n    // overridden\n    invalidateLayoutCache : function()\n    {\n      this.base(arguments);\n\n      this.__colWidths = null;\n      this.__rowHeights = null;\n    },\n\n\n    // overridden\n    _computeSizeHint : function()\n    {\n      if (this._invalidChildrenCache) {\n        this.__buildGrid();\n      }\n\n      // calculate col widths\n      var colWidths = this._getColWidths();\n\n      var minWidth=0, width=0;\n\n      for (var i=0, l=colWidths.length; i<l; i++)\n      {\n        var col = colWidths[i];\n        if (this.getColumnFlex(i) > 0) {\n          minWidth += col.minWidth;\n        } else {\n          minWidth += col.width;\n        }\n\n        width += col.width;\n      }\n\n      // calculate row heights\n      var rowHeights = this._getRowHeights();\n\n      var minHeight=0, height=0;\n      for (var i=0, l=rowHeights.length; i<l; i++)\n      {\n        var row = rowHeights[i];\n\n        if (this.getRowFlex(i) > 0) {\n          minHeight += row.minHeight;\n        } else {\n          minHeight += row.height;\n        }\n\n        height += row.height;\n      }\n\n      var spacingX = this.getSpacingX() * (colWidths.length - 1);\n      var spacingY = this.getSpacingY() * (rowHeights.length - 1);\n\n      var hint = {\n        minWidth : minWidth + spacingX,\n        width : width + spacingX,\n        minHeight : minHeight + spacingY,\n        height : height + spacingY\n      };\n\n      return hint;\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCT\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.__grid = this.__rowData = this.__colData = this.__colSpans =\n      this.__rowSpans = this.__colWidths = this.__rowHeights = null;\n  }\n});\n"
  ]
}