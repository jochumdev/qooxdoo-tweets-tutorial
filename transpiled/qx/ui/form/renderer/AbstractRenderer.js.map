{
  "version": 3,
  "sources": [
    "AbstractRenderer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "ui",
    "core",
    "Widget",
    "implement",
    "form",
    "renderer",
    "IFormRenderer",
    "construct",
    "_labels",
    "Environment",
    "get",
    "locale",
    "Manager",
    "getInstance",
    "addListener",
    "_onChangeLocale",
    "_names",
    "_form",
    "_render",
    "_onFormChange",
    "members",
    "groups",
    "getGroups",
    "i",
    "length",
    "group",
    "addItems",
    "items",
    "labels",
    "title",
    "options",
    "headerOptions",
    "buttons",
    "getButtons",
    "buttonOptions",
    "getButtonOptions",
    "addButton",
    "_removeAll",
    "dispose",
    "_connectVisibility",
    "item",
    "label",
    "bind",
    "select",
    "e",
    "entry",
    "name",
    "translate",
    "newText",
    "_createLabelText",
    "setValue",
    "required",
    "getRequired",
    "colon",
    "names",
    "Error",
    "button",
    "destruct",
    "removeListener",
    "AbstractRenderer"
  ],
  "mappings": "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",
  "file": "AbstractRenderer.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Abstract renderer for {@link qx.ui.form.Form}. This abstract renderer should\n * be the superclass of all form renderer. It takes the form, which is\n * supplied as constructor parameter and configures itself. So if you need to\n * set some additional information on your renderer before adding the widgets,\n * be sure to do that before calling this.base(arguments, form).\n */\nqx.Class.define(\"qx.ui.form.renderer.AbstractRenderer\",\n{\n  type : \"abstract\",\n  extend : qx.ui.core.Widget,\n  implement : qx.ui.form.renderer.IFormRenderer,\n\n  /**\n   * @param form {qx.ui.form.Form} The form to render.\n   */\n  construct : function(form)\n  {\n    this.base(arguments);\n\n    this._labels = [];\n\n    // translation support\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().addListener(\n        \"changeLocale\", this._onChangeLocale, this\n      );\n      this._names = [];\n    }\n    this._form = form;\n    this._render();\n\n    form.addListener(\"change\", this._onFormChange, this);\n  },\n\n\n  members :\n  {\n    _names : null,\n    _form : null,\n    _labels : null,\n\n\n    /**\n     * Renders the form: adds the items and buttons.\n     */\n    _render : function() {\n      // add the groups\n      var groups = this._form.getGroups();\n      for (var i = 0; i < groups.length; i++) {\n        var group = groups[i];\n        this.addItems(\n          group.items, group.labels, group.title, group.options, group.headerOptions\n        );\n      }\n\n      // add the buttons\n      var buttons = this._form.getButtons();\n      var buttonOptions = this._form.getButtonOptions();\n      for (var i = 0; i < buttons.length; i++) {\n        this.addButton(buttons[i], buttonOptions[i]);\n      }\n    },\n\n\n    /**\n     * Handler responsible for updating the rendered widget as soon as the\n     * form changes.\n     */\n    _onFormChange : function() {\n      this._removeAll();\n      // remove all created labels\n      for (var i=0; i < this._labels.length; i++) {\n        this._labels[i].dispose();\n      }\n      this._labels = [];\n\n      this._render();\n    },\n\n\n    /**\n     * Helper to bind the item's visibility to the label's visibility.\n     * @param item {qx.ui.core.Widget} The form element.\n     * @param label {qx.ui.basic.Label} The label for the form element.\n     */\n    _connectVisibility : function(item, label) {\n      // map the items visibility to the label\n      item.bind(\"visibility\", label, \"visibility\");\n    },\n\n\n    /**\n     * Locale change event handler\n     *\n     * @signature function(e)\n     * @param e {Event} the change event\n     */\n    _onChangeLocale : qx.core.Environment.select(\"qx.dynlocale\",\n    {\n      \"true\" : function(e) {\n        for (var i = 0; i < this._names.length; i++) {\n          var entry = this._names[i];\n          if (entry.name && entry.name.translate) {\n            entry.name = entry.name.translate();\n          }\n          var newText = this._createLabelText(entry.name, entry.item);\n          entry.label.setValue(newText);\n        }\n      },\n\n      \"false\" : null\n    }),\n\n\n    /**\n     * Creates the label text for the given form item.\n     *\n     * @param name {String} The content of the label without the\n     *   trailing * and :\n     * @param item {qx.ui.form.IForm} The item, which has the required state.\n     * @return {String} The text for the given item.\n     */\n    _createLabelText : function(name, item)\n    {\n      var required = \"\";\n      if (item.getRequired()) {\n       required = \" <span style='color:red'>*</span> \";\n      }\n\n      // Create the label. Append a colon only if there's text to display.\n      var colon = name.length > 0 || item.getRequired() ? \" :\" : \"\";\n      return name + required + colon;\n    },\n\n\n    // interface implementation\n    addItems : function(items, names, title) {\n      throw new Error(\"Abstract method call\");\n    },\n\n\n    // interface implementation\n    addButton : function(button) {\n      throw new Error(\"Abstract method call\");\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeListener(\"changeLocale\", this._onChangeLocale, this);\n    }\n    this._names = null;\n\n    this._form.removeListener(\"change\", this._onFormChange, this);\n    this._form = null;\n  }\n});\n"
  ]
}