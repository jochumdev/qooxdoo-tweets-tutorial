{
  "version": 3,
  "sources": [
    "ObjectRegistry.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "inShutDown",
    "__registry",
    "__nextHash",
    "__freeHashes",
    "__postId",
    "__stackTraces",
    "register",
    "obj",
    "registry",
    "hash",
    "$$hash",
    "cache",
    "length",
    "core",
    "Environment",
    "get",
    "pop",
    "dev",
    "Debug",
    "disposeProfilingActive",
    "StackTrace",
    "getStackTrace",
    "dispose",
    "Error",
    "unregister",
    "push",
    "ex",
    "removeAttribute",
    "toHashCode",
    "clearHashCode",
    "fromHashCode",
    "suppressWarnings",
    "log",
    "Logger",
    "warn",
    "hasHashCode",
    "shutdown",
    "hashes",
    "sort",
    "a",
    "b",
    "parseInt",
    "i",
    "l",
    "error",
    "toString",
    "debug",
    "getRegistry",
    "getNextHash",
    "getPostId",
    "getStackTraces",
    "defer",
    "window",
    "top",
    "frames",
    "ObjectRegistry"
  ],
  "mappings": "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",
  "file": "ObjectRegistry.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Registration for all instances of qooxdoo classes. Mainly\n * used to manage them for the final shutdown sequence and to\n * use weak references when connecting widgets to DOM nodes etc.\n *\n * @ignore(qx.dev, qx.dev.Debug.*)\n */\nqx.Bootstrap.define(\"qx.core.ObjectRegistry\",\n{\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** \n     * @type {Boolean} Whether the application is in the shutdown phase\n     * @deprecated {6.0} shutdown is not a valid mechanism to terminate apps \n     * */\n    inShutDown : false,\n\n    /** @type {Map} Internal data structure to store objects */\n    __registry : {},\n\n    /** @type {Integer} Next new hash code. */\n    __nextHash : 0,\n\n    /** @type {Array} List of all free hash codes */\n    __freeHashes : [],\n\n    /** @type {String} Post id for hash code creation. */\n    __postId : \"\",\n\n    /** @type {Map} Object hashes to stack traces (for dispose profiling only) */\n    __stackTraces : {},\n\n    /**\n     * Registers an object into the database. This adds a hashcode\n     * to the object (if not already done before) and stores it under\n     * this hashcode. You can access this object later using the hashcode\n     * by calling {@link #fromHashCode}.\n     *\n     * All registered objects are automatically disposed on application\n     * shutdown. Each registered object must at least have a method\n     * called <code>dispose</code>.\n     *\n     * @param obj {Object} Any object with a dispose() method\n     */\n    register : function(obj)\n    {\n      var registry = this.__registry;\n      if (!registry) {\n        return;\n      }\n\n      var hash = obj.$$hash;\n      if (hash == null)\n      {\n        // Create new hash code\n        var cache = this.__freeHashes;\n        if (cache.length > 0 && !qx.core.Environment.get(\"qx.debug.dispose\")) {\n          hash = cache.pop();\n        } else {\n          hash = (this.__nextHash++) + this.__postId;\n        }\n\n        // Store hash code\n        obj.$$hash = hash;\n\n        if (qx.core.Environment.get(\"qx.debug.dispose\")) {\n          if (qx.dev && qx.dev.Debug && qx.dev.Debug.disposeProfilingActive) {\n            this.__stackTraces[hash] = qx.dev.StackTrace.getStackTrace();\n          }\n        }\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (!obj.dispose) {\n          throw new Error(\"Invalid object: \" + obj);\n        }\n      }\n\n      registry[hash] = obj;\n    },\n\n\n    /**\n     * Removes the given object from the database.\n     *\n     * @param obj {Object} Any previously registered object\n     */\n    unregister : function(obj)\n    {\n      var hash = obj.$$hash;\n      if (hash == null) {\n        return;\n      }\n\n      var registry = this.__registry;\n      if (registry && registry[hash])\n      {\n        delete registry[hash];\n        this.__freeHashes.push(hash);\n      }\n\n      // Delete the hash code\n      try\n      {\n        delete obj.$$hash;\n      }\n      catch(ex)\n      {\n        // IE has trouble directly removing the hash\n        // but it's ok with using removeAttribute\n        if (obj.removeAttribute) {\n          obj.removeAttribute(\"$$hash\");\n        }\n      }\n    },\n\n\n    /**\n     * Returns an unique identifier for the given object. If such an identifier\n     * does not yet exist, create it.\n     *\n     * @param obj {Object} the object to get the hashcode for\n     * @return {String} unique identifier for the given object\n     */\n    toHashCode : function(obj)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (obj == null) {\n          throw new Error(\"Invalid object: \" + obj);\n        }\n      }\n\n      var hash = obj.$$hash;\n      if (hash != null) {\n        return hash;\n      }\n\n      // Create new hash code\n      var cache = this.__freeHashes;\n      if (cache.length > 0) {\n        hash = cache.pop();\n      } else {\n        hash = (this.__nextHash++) + this.__postId;\n      }\n\n      // Store\n      return obj.$$hash = hash;\n    },\n\n\n    /**\n     * Clears the unique identifier on the given object.\n     *\n     * @param obj {Object} the object to clear the hashcode for\n     */\n    clearHashCode : function(obj)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (obj == null) {\n          throw new Error(\"Invalid object: \" + obj);\n        }\n      }\n\n      var hash = obj.$$hash;\n      if (hash != null)\n      {\n        this.__freeHashes.push(hash);\n\n        // Delete the hash code\n        try\n        {\n          delete obj.$$hash;\n        }\n        catch(ex)\n        {\n          // IE has trouble directly removing the hash\n          // but it's ok with using removeAttribute\n          if (obj.removeAttribute) {\n            obj.removeAttribute(\"$$hash\");\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Get an object instance by its hash code as returned by {@link #toHashCode}.\n     * If the object is already disposed or the hashCode is invalid,\n     * <code>null</code> is returned.\n     *\n     * @param hash {String} The object's hash code.\n     * @param suppressWarnings {Boolean?} if true warnings are suppressed; default is false\n     * @return {qx.core.Object} The corresponding object or <code>null</code>.\n     */\n    fromHashCode : function(hash, suppressWarnings) {\n      var obj = this.__registry[hash] || null;\n      if (!obj && !suppressWarnings) {\n        qx.log.Logger.warn(this, \"Object with hash code \"+ hash + \" does not exist (since Qooxdoo 6.0 fromHashCode requires that you explicitly register objects with qx.core.ObjectRegistry.register)\");\n      }\n      return obj;\n    },\n\n\n    /**\n     * Detects whether an object instance is indexed by its hash code as returned by {@link #toHashCode}.\n     * Unlike {@link #fromHashCode} this does not output warnings if the object does not exist\n     *\n     * @param hash {String} The object's hash code.\n     * @return {qx.core.Object} The corresponding object or <code>null</code>.\n     */\n    hasHashCode : function(hash) {\n      return !!this.__registry[hash];\n    },\n\n\n    /**\n     * Disposing all registered object and cleaning up registry. This is\n     * automatically executed at application shutdown.\n     * \n     * @deprecated {6.0} shutdown is not a valid means to clean up because destruction order\n     * is not defined and dispose()/destructors are deprecated in favour of automatic\n     * garbage collection\n     */\n    shutdown : function()\n    {\n      this.inShutDown = true;\n\n      var registry = this.__registry;\n      var hashes = [];\n\n      for (var hash in registry) {\n        hashes.push(hash);\n      }\n\n      // sort the objects! Remove the objecs created at startup\n      // as late as possible\n      hashes.sort(function(a, b) {\n        return parseInt(b, 10)-parseInt(a, 10);\n      });\n\n      var obj, i=0, l=hashes.length;\n      while(true)\n      {\n        try\n        {\n          for (; i<l; i++)\n          {\n            hash = hashes[i];\n            obj = registry[hash];\n\n            if (obj && obj.dispose) {\n              obj.dispose();\n            }\n          }\n        }\n        catch(ex)\n        {\n          qx.Bootstrap.error(this, \"Could not dispose object \" + obj.toString() + \": \" + ex, ex);\n\n          if (i !== l)\n          {\n            i++;\n            continue;\n          }\n        }\n\n        break;\n      }\n\n      qx.Bootstrap.debug(this, \"Disposed \" + l + \" objects\");\n\n      delete this.__registry;\n    },\n\n\n    /**\n     * Returns the object registry.\n     *\n     * @return {Object} The registry\n     */\n    getRegistry : function() {\n      return this.__registry;\n    },\n\n\n    /**\n     * Returns the next hash code that will be used\n     *\n     * @return {Integer} The next hash code\n     * @internal\n     */\n    getNextHash : function() {\n      return this.__nextHash;\n    },\n\n\n    /**\n     * Returns the postfix that identifies the current iframe\n     *\n     * @return {Integer} The next hash code\n     * @internal\n     */\n    getPostId : function() {\n      return this.__postId;\n    },\n\n\n    /**\n     * Returns the map of stack traces recorded when objects are registered\n     * (for dispose profiling)\n     * @return {Map} Map: object hash codes to stack traces\n     * @internal\n     */\n    getStackTraces : function() {\n      return this.__stackTraces;\n    }\n  },\n\n  defer : function(statics)\n  {\n    if (window && window.top)\n    {\n      var frames = window.top.frames;\n      for (var i = 0; i < frames.length; i++)\n      {\n        if (frames[i] === window)\n        {\n          statics.__postId = \"-\" + (i + 1);\n          return;\n        }\n      }\n    }\n    statics.__postId = \"-0\";\n  }\n});\n"
  ]
}