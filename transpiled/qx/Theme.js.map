{
  "version": 3,
  "sources": [
    "Theme.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "name",
    "config",
    "include",
    "__normalizeArray",
    "patch",
    "core",
    "Environment",
    "get",
    "__validateConfig",
    "theme",
    "$$type",
    "title",
    "toString",
    "genericToString",
    "extend",
    "supertheme",
    "basename",
    "createNamespace",
    "__convert",
    "__initializeAliases",
    "$$registry",
    "i",
    "a",
    "l",
    "length",
    "objectOrArray",
    "isArray",
    "aliases",
    "objectMergeWith",
    "getAll",
    "getByName",
    "isDefined",
    "undefined",
    "getTotalNumber",
    "objectGetLength",
    "__extractType",
    "keys",
    "__inheritableKeys",
    "type",
    "clazz",
    "prototype",
    "$$clazz",
    "target",
    "source",
    "id",
    "base",
    "Error",
    "__allowedKeys",
    "select",
    "__metaKeys",
    "allowed",
    "key",
    "maps",
    "Array",
    "RegExp",
    "Date",
    "classname",
    "counter",
    "meta",
    "value",
    "mixinTheme",
    "__checkForInvalidTheme",
    "errorObj",
    "stackTrace",
    "dev",
    "StackTrace",
    "getStackTraceFromError",
    "error",
    "Theme"
  ],
  "mappings": "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",
  "file": "Theme.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Theme classes contain styling information for certain aspects of the\n * graphical user interface.\n *\n * Supported themes are: colors, decorations, fonts, icons, appearances.\n * The additional meta theme allows for grouping of the individual\n * themes.\n *\n * For more details, take a look at the\n * <a href='http://manual.qooxdoo.org/${qxversion}/pages/desktop/ui_theming.html' target='_blank'>\n * documentation of the theme system in the qooxdoo manual.</a>\n */\nqx.Bootstrap.define(\"qx.Theme\",\n{\n  statics:\n  {\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Theme config\n     *\n     * Example:\n     * <pre class='javascript'>\n     * qx.Theme.define(\"name\",\n     * {\n     *   aliases : {\n     *     \"aliasKey\" : \"resourceFolderOrUri\"\n     *   },\n     *   extend : otherTheme,\n     *   include : [MMixinTheme],\n     *   patch : [MMixinTheme],\n     *   colors : {},\n     *   decorations : {},\n     *   fonts : {},\n     *   widgets : {},\n     *   appearances : {},\n     *   meta : {}\n     * });\n     * </pre>\n     *\n     * For more details, take a look at the\n     * <a href='http://manual.qooxdoo.org/${qxversion}/pages/desktop/ui_theming.html' target='_blank'>\n     * documentation of the theme system in the qooxdoo manual.</a>\n     *\n     * @param name {String} name of the mixin\n     * @param config {Map} config structure\n     */\n    define : function(name, config)\n    {\n      if (!config) {\n        var config = {};\n      }\n\n      config.include = this.__normalizeArray(config.include);\n      config.patch = this.__normalizeArray(config.patch);\n\n      // Validate incoming data\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__validateConfig(name, config);\n      }\n\n      // Create alias\n      var theme =\n      {\n        $$type : \"Theme\",\n        name : name,\n        title : config.title,\n\n        // Attach toString\n        toString : this.genericToString\n      };\n\n      // Remember extend\n      if (config.extend) {\n        theme.supertheme = config.extend;\n      }\n\n      // Assign to namespace\n      theme.basename = qx.Bootstrap.createNamespace(name, theme);\n\n      // Convert theme entry from Object to Function (for prototype inheritance)\n      this.__convert(theme, config);\n\n      this.__initializeAliases(theme, config);\n\n      // Store class reference in global class registry\n      this.$$registry[name] = theme;\n\n      // Include mixin themes\n      for (var i=0, a=config.include, l=a.length; i<l; i++) {\n        this.include(theme, a[i]);\n      }\n\n      for (var i=0, a=config.patch, l=a.length; i<l; i++) {\n        this.patch(theme, a[i]);\n      }\n    },\n\n    /**\n     * Normalize an object to an array\n     *\n     * @param objectOrArray {Object|Array} Either an object that is to be\n     *   normalized to an array, or an array, which is just passed through\n     *\n     * @return {Array} Either an array that has the original object as its\n     *   single item, or the original array itself\n     */\n    __normalizeArray : function(objectOrArray)\n    {\n      if (!objectOrArray) {\n        return [];\n      }\n\n      if (qx.Bootstrap.isArray(objectOrArray)) {\n        return objectOrArray;\n      } else {\n        return [objectOrArray];\n      }\n    },\n\n\n    /**\n     * Initialize alias inheritance\n     *\n     * @param theme {Map} The theme\n     * @param config {Map} config structure\n     */\n    __initializeAliases : function(theme, config)\n    {\n      var aliases = config.aliases || {};\n      if (config.extend && config.extend.aliases) {\n        qx.Bootstrap.objectMergeWith(aliases, config.extend.aliases, false);\n      }\n\n      theme.aliases = aliases;\n    },\n\n\n    /**\n     * Return a map of all known themes\n     *\n     * @return {Map} known themes\n     */\n    getAll : function() {\n      return this.$$registry;\n    },\n\n\n    /**\n     * Returns a theme by name\n     *\n     * @param name {String} theme name to check\n     * @return {Object ? void} theme object\n     */\n    getByName : function(name) {\n      return this.$$registry[name];\n    },\n\n\n    /**\n     * Determine if theme exists\n     *\n     * @param name {String} theme name to check\n     * @return {Boolean} true if theme exists\n     */\n    isDefined : function(name) {\n      return this.getByName(name) !== undefined;\n    },\n\n\n    /**\n     * Determine the number of themes which are defined\n     *\n     * @return {Number} the number of classes\n     */\n    getTotalNumber : function() {\n      return qx.Bootstrap.objectGetLength(this.$$registry);\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE/INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method will be attached to all themes to return\n     * a nice identifier for them.\n     *\n     * @internal\n     * @return {String} The interface identifier\n     */\n    genericToString : function() {\n      return \"[Theme \" + this.name + \"]\";\n    },\n\n\n    /**\n     * Extract the inheritable key (could be only one)\n     *\n     * @param config {Map} The map from where to extract the key\n     * @return {String} the key which was found\n     */\n    __extractType : function(config)\n    {\n      for (var i=0, keys=this.__inheritableKeys, l=keys.length; i<l; i++)\n      {\n        if (config[keys[i]]) {\n          return keys[i];\n        }\n      }\n    },\n\n\n    /**\n     * Convert existing entry to a prototype based inheritance function\n     *\n     * @param theme {Theme} newly created theme object\n     * @param config {Map} incoming theme configuration\n     */\n    __convert : function(theme, config)\n    {\n      var type = this.__extractType(config);\n\n      // Use theme key from extended theme if own one is not available\n      if (config.extend && !type) {\n        type = config.extend.type;\n      }\n\n      // Save theme type\n      theme.type = type || \"other\";\n\n      // Create pseudo class\n      var clazz = function() {};\n\n      // Process extend config\n      if (config.extend) {\n        clazz.prototype = new config.extend.$$clazz;\n      }\n\n      var target = clazz.prototype;\n      var source = config[type];\n\n      // Copy entries to prototype\n      for (var id in source)\n      {\n        target[id] = source[id];\n\n        // Appearance themes only:\n        // Convert base flag to class reference (needed for mixin support)\n        if (target[id].base)\n        {\n          if (qx.core.Environment.get(\"qx.debug\"))\n          {\n            if (!config.extend) {\n              throw new Error(\"Found base flag in entry '\" + id + \"' of theme '\" + config.name + \"'. Base flags are not allowed for themes without a valid super theme!\");\n            }\n          }\n\n          target[id].base = config.extend;\n        }\n      }\n\n      // store pseudo class\n      theme.$$clazz = clazz;\n\n      // and create instance under the old key\n      theme[type] = new clazz;\n    },\n\n\n    /** @type {Map} Internal theme registry */\n    $$registry : {},\n\n\n    /** @type {Array} Keys which support inheritance */\n    __inheritableKeys : [ \"colors\", \"borders\", \"decorations\", \"fonts\", \"icons\", \"widgets\", \"appearances\", \"meta\" ],\n\n\n    /** @type {Map} allowed keys in theme definition */\n    __allowedKeys : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\":\n      {\n        \"title\"       : \"string\", // String\n        \"aliases\"     : \"object\", // Map\n        \"type\"        : \"string\", // String\n        \"extend\"      : \"object\", // Theme\n        \"colors\"      : \"object\", // Map\n        \"borders\"     : \"object\", // Map\n        \"decorations\" : \"object\", // Map\n        \"fonts\"       : \"object\", // Map\n        \"icons\"       : \"object\", // Map\n        \"widgets\"     : \"object\", // Map\n        \"appearances\" : \"object\", // Map\n        \"meta\"        : \"object\", // Map\n        \"include\"     : \"object\", // Array\n        \"patch\"       : \"object\"  // Array\n      },\n\n      \"default\" : null\n    }),\n\n    /** @type {Map} allowed keys inside a meta theme block */\n    __metaKeys :qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\":\n      {\n        \"color\" : \"object\",\n        \"border\" : \"object\",\n        \"decoration\" : \"object\",\n        \"font\" : \"object\",\n        \"icon\" : \"object\",\n        \"appearance\" : \"object\",\n        \"widget\" : \"object\"\n      },\n\n      \"default\" : null\n    }),\n\n    /**\n     * Validates incoming configuration and checks keys and values\n     *\n     * @signature function(name, config)\n     * @param name {String} The name of the class\n     * @param config {Map} Configuration map\n     * @throws {Error} if the given config is not valid (e.g. wrong key or wrong key value)\n     */\n    __validateConfig : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\": function(name, config)\n      {\n        var allowed = this.__allowedKeys;\n        for (var key in config)\n        {\n          if (allowed[key] === undefined) {\n            throw new Error('The configuration key \"' + key + '\" in theme \"' + name + '\" is not allowed!');\n          }\n\n          if (config[key] == null) {\n            throw new Error('Invalid key \"' + key + '\" in theme \"' + name + '\"! The value is undefined/null!');\n          }\n\n          if (allowed[key] !== null && typeof config[key] !== allowed[key]) {\n            throw new Error('Invalid type of key \"' + key + '\" in theme \"' + name + '\"! The type of the key must be \"' + allowed[key] + '\"!');\n          }\n        }\n\n        // Validate maps\n        var maps = [ \"colors\", \"borders\", \"decorations\", \"fonts\", \"icons\", \"widgets\", \"appearances\", \"meta\" ];\n        for (var i=0, l=maps.length; i<l; i++)\n        {\n          var key = maps[i];\n\n          if (config[key] !== undefined && (config[key] instanceof Array || config[key] instanceof RegExp || config[key] instanceof Date || config[key].classname !== undefined)) {\n            throw new Error('Invalid key \"' + key + '\" in theme \"' + name + '\"! The value needs to be a map!');\n          }\n        }\n\n        // Check conflicts (detect number ...)\n        var counter = 0;\n        for (var i=0, l=maps.length; i<l; i++)\n        {\n          var key = maps[i];\n\n          if (config[key]) {\n            counter++;\n          }\n\n          if (counter > 1) {\n            throw new Error(\"You can only define one theme category per file! Invalid theme: \" + name);\n          }\n        }\n\n        // Validate meta\n        if (config.meta)\n        {\n          var value;\n          for (var key in config.meta)\n          {\n            value = config.meta[key];\n\n            if (this.__metaKeys[key] === undefined) {\n              throw new Error('The key \"' + key + '\" is not allowed inside a meta theme block.');\n            }\n\n            if (typeof value !== this.__metaKeys[key]) {\n              throw new Error('The type of the key \"' + key + '\" inside the meta block is wrong.');\n            }\n\n            if (!(typeof value === \"object\" && value !== null && value.$$type === \"Theme\")) {\n              throw new Error('The content of a meta theme must reference to other themes. The value for \"' + key + '\" in theme \"' + name + '\" is invalid: ' + value);\n            }\n          }\n        }\n\n        // Validate extend\n        if (config.extend && config.extend.$$type !== \"Theme\") {\n          throw new Error('Invalid extend in theme \"' + name + '\": ' + config.extend);\n        }\n\n        // Validate include\n        if (config.include) {\n          for (var i=0,l=config.include.length; i<l; i++) {\n            if (typeof(config.include[i]) == \"undefined\" || config.include[i].$$type !== \"Theme\") {\n              throw new Error('Invalid include in theme \"' + name + '\": ' + config.include[i]);\n            }\n          }\n        }\n\n        // Validate patch\n        if (config.patch) {\n          for (var i=0,l=config.patch.length; i<l; i++) {\n            if (typeof(config.patch[i]) === \"undefined\" || config.patch[i].$$type !== \"Theme\") {\n              throw new Error('Invalid patch in theme \"' + name + '\": ' + config.patch[i]);\n            }\n          }\n        }\n      },\n\n      \"default\" : function() {}\n    }),\n\n\n    /**\n     * Include all keys of the given mixin theme into the theme. The mixin may\n     * include keys which are already defined in the target theme. Existing\n     * features of equal name will be overwritten.\n     *\n     * @param theme {Theme} An existing theme which should be modified by including the mixin theme.\n     * @param mixinTheme {Theme} The theme to be included.\n     */\n    patch : function(theme, mixinTheme)\n    {\n      this.__checkForInvalidTheme(mixinTheme);\n\n      var type = this.__extractType(mixinTheme);\n      if (type !== this.__extractType(theme)) {\n        throw new Error(\"The mixins '\" + theme.name + \"' are not compatible '\" + mixinTheme.name + \"'!\");\n      }\n\n      var source = mixinTheme[type];\n      var target = theme.$$clazz.prototype;\n\n      for (var key in source) {\n        target[key] = source[key];\n      }\n    },\n\n\n    /**\n     * Include all keys of the given mixin theme into the theme. If the\n     * mixin includes any keys that are already available in the\n     * class, they will be silently ignored. Use the {@link #patch} method\n     * if you need to overwrite keys in the current class.\n     *\n     * @param theme {Theme} An existing theme which should be modified by including the mixin theme.\n     * @param mixinTheme {Theme} The theme to be included.\n     */\n    include : function(theme, mixinTheme)\n    {\n      this.__checkForInvalidTheme(mixinTheme);\n\n      var type = mixinTheme.type;\n      if (type !== theme.type) {\n        throw new Error(\"The mixins '\" + theme.name + \"' are not compatible '\" + mixinTheme.name + \"'!\");\n      }\n\n      var source = mixinTheme[type];\n      var target = theme.$$clazz.prototype;\n\n      for (var key in source)\n      {\n        //Skip keys already present\n        if (target[key] !== undefined) {\n          continue;\n        }\n\n        target[key] = source[key];\n      }\n    },\n\n    /**\n     * Helper method to check for an invalid theme\n     *\n     * @param mixinTheme {qx.Theme?null} theme to check\n     * @throws {Error} if the theme is not valid\n     */\n    __checkForInvalidTheme: function(mixinTheme)\n    {\n      if (typeof mixinTheme === \"undefined\" || mixinTheme == null)\n      {\n        var errorObj = new Error(\"Mixin theme is not a valid theme!\");\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          var stackTrace = qx.dev.StackTrace.getStackTraceFromError(errorObj);\n          qx.Bootstrap.error(this, stackTrace);\n        }\n\n        throw errorObj;\n      }\n    }\n  }\n});\n"
  ]
}