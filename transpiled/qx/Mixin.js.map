{
  "version": 3,
  "sources": [
    "Mixin.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "name",
    "config",
    "include",
    "getClass",
    "core",
    "Environment",
    "get",
    "__validateConfig",
    "mixin",
    "setDisplayNames",
    "key",
    "Function",
    "$$mixin",
    "construct",
    "$$constructor",
    "setDisplayName",
    "$$includes",
    "properties",
    "$$properties",
    "members",
    "$$members",
    "events",
    "$$events",
    "destruct",
    "$$destructor",
    "$$type",
    "toString",
    "genericToString",
    "basename",
    "createNamespace",
    "$$registry",
    "checkCompatibility",
    "mixins",
    "list",
    "flatten",
    "len",
    "length",
    "i",
    "Error",
    "isCompatible",
    "clazz",
    "util",
    "OOUtil",
    "getMixins",
    "push",
    "Mixin",
    "getByName",
    "isDefined",
    "undefined",
    "getTotalNumber",
    "objectGetLength",
    "concat",
    "l",
    "apply",
    "__allowedKeys",
    "select",
    "allowed",
    "maps",
    "indexOf",
    "classname",
    "a"
  ],
  "mappings": "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",
  "file": "Mixin.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * This class is used to define mixins (similar to mixins in Ruby).\n *\n * Mixins are collections of code and variables, which can be merged into\n * other classes. They are similar to classes but don't support inheritance.\n *\n * See the description of the {@link #define} method how a mixin is defined.\n *\n * @require(qx.lang.normalize.Array)\n */\nqx.Bootstrap.define(\"qx.Mixin\",\n{\n  statics :\n  {\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Define a new mixin.\n     *\n     * Example:\n     * <pre class='javascript'>\n     * qx.Mixin.define(\"name\",\n     * {\n     *   include: [SuperMixins],\n     *\n     *   properties: {\n     *     tabIndex: {type: \"number\", init: -1}\n     *   },\n     *\n     *   members:\n     *   {\n     *     prop1: \"foo\",\n     *     meth1: function() {},\n     *     meth2: function() {}\n     *   }\n     * });\n     * </pre>\n     *\n     * @param name {String} name of the mixin\n     * @param config {Map ? null} Mixin definition structure. The configuration map has the following keys:\n     *   <table>\n     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n     *     <tr><th>construct</th><td>Function</td><td>An optional mixin constructor. It is called on instantiation each\n     *         class including this mixin. The constructor takes no parameters.</td></tr>\n     *     <tr><th>destruct</th><td>Function</td><td>An optional mixin destructor.</td></tr>\n     *     <tr><th>include</th><td>Mixin[]</td><td>Array of mixins, which will be merged into the mixin.</td></tr>\n     *     <tr><th>statics</th><td>Map</td><td>\n     *         Map of statics of the mixin. The statics will not get copied into the target class. They remain\n     *         accessible from the mixin. This is the same behaviour as statics in interfaces ({@link qx.Interface#define}).\n     *     </td></tr>\n     *     <tr><th>members</th><td>Map</td><td>Map of members of the mixin.</td></tr>\n     *     <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n     *           {@link qx.core.Property}.</td></tr>\n     *     <tr><th>events</th><td>Map</td><td>\n     *         Map of events the mixin fires. The keys are the names of the events and the values are\n     *         corresponding event type classes.\n     *     </td></tr>\n     *   </table>\n     *\n     * @return {qx.Mixin} The configured mixin\n     */\n    define : function(name, config)\n    {\n      if (config)\n      {\n        // Normalize include\n        if (config.include && !(qx.Bootstrap.getClass(config.include) === \"Array\")) {\n          config.include = [config.include];\n        }\n\n        // Validate incoming data\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.__validateConfig(name, config);\n        }\n\n        // Create Interface from statics\n        var mixin = config.statics ? config.statics : {};\n        qx.Bootstrap.setDisplayNames(mixin, name);\n\n        for(var key in mixin) {\n          if (mixin[key] instanceof Function)\n          {\n            mixin[key].$$mixin = mixin;\n          }\n        }\n\n        // Attach configuration\n        if (config.construct)\n        {\n          mixin.$$constructor = config.construct;\n          qx.Bootstrap.setDisplayName(config.construct, name, \"constructor\");\n        }\n\n        if (config.include) {\n          mixin.$$includes = config.include;\n        }\n\n        if (config.properties) {\n          mixin.$$properties = config.properties;\n        }\n\n        if (config.members)\n        {\n          mixin.$$members = config.members;\n          qx.Bootstrap.setDisplayNames(config.members, name + \".prototype\");\n        }\n\n        for(var key in mixin.$$members)\n        {\n          if (mixin.$$members[key] instanceof Function) {\n            mixin.$$members[key].$$mixin = mixin;\n          }\n        }\n\n        if (config.events) {\n          mixin.$$events = config.events;\n        }\n\n        if (config.destruct)\n        {\n          mixin.$$destructor = config.destruct;\n          qx.Bootstrap.setDisplayName(config.destruct, name, \"destruct\");\n        }\n      }\n      else\n      {\n        var mixin = {};\n      }\n\n      // Add basics\n      mixin.$$type = \"Mixin\";\n      mixin.name = name;\n\n      // Attach toString\n      mixin.toString = this.genericToString;\n\n      // Assign to namespace\n      mixin.basename = qx.Bootstrap.createNamespace(name, mixin);\n\n      // Store class reference in global mixin registry\n      this.$$registry[name] = mixin;\n\n      // Return final mixin\n      return mixin;\n    },\n\n\n    /**\n     * Check compatibility between mixins (including their includes)\n     *\n     * @param mixins {Mixin[]} an array of mixins\n     * @throws {Error} when there is a conflict between the mixins\n     * @return {Boolean} <code>true</code> if the mixin passed the compatibility check\n     */\n    checkCompatibility : function(mixins)\n    {\n      var list = this.flatten(mixins);\n      var len = list.length;\n\n      if (len < 2) {\n        return true;\n      }\n\n      var properties = {};\n      var members = {};\n      var events = {};\n      var mixin;\n\n      for (var i=0; i<len; i++)\n      {\n        mixin = list[i];\n\n        for (var key in mixin.events)\n        {\n          if(events[key]) {\n            throw new Error('Conflict between mixin \"' + mixin.name + '\" and \"' + events[key] + '\" in member \"' + key + '\"!');\n          }\n\n          events[key] = mixin.name;\n        }\n\n        for (var key in mixin.properties)\n        {\n          if(properties[key]) {\n            throw new Error('Conflict between mixin \"' + mixin.name + '\" and \"' + properties[key] + '\" in property \"' + key + '\"!');\n          }\n\n          properties[key] = mixin.name;\n        }\n\n        for (var key in mixin.members)\n        {\n          if(members[key]) {\n            throw new Error('Conflict between mixin \"' + mixin.name + '\" and \"' + members[key] + '\" in member \"' + key + '\"!');\n          }\n\n          members[key] = mixin.name;\n        }\n      }\n\n      return true;\n    },\n\n\n    /**\n     * Checks if a class is compatible to the given mixin (no conflicts)\n     *\n     * @param mixin {Mixin} mixin to check\n     * @param clazz {Class} class to check\n     * @throws {Error} when the given mixin is incompatible to the class\n     * @return {Boolean} true if the mixin is compatible to the given class\n     */\n    isCompatible : function(mixin, clazz)\n    {\n      var list = qx.util.OOUtil.getMixins(clazz);\n      list.push(mixin);\n      return qx.Mixin.checkCompatibility(list);\n    },\n\n\n    /**\n     * Returns a mixin by name\n     *\n     * @param name {String} class name to resolve\n     * @return {Class} the class\n     */\n    getByName : function(name) {\n      return this.$$registry[name];\n    },\n\n\n    /**\n     * Determine if mixin exists\n     *\n     * @param name {String} mixin name to check\n     * @return {Boolean} true if mixin exists\n     */\n    isDefined : function(name) {\n      return this.getByName(name) !== undefined;\n    },\n\n\n    /**\n     * Determine the number of mixins which are defined\n     *\n     * @return {Number} the number of mixins\n     */\n    getTotalNumber : function() {\n      return qx.Bootstrap.objectGetLength(this.$$registry);\n    },\n\n\n    /**\n     * Generates a list of all mixins given plus all the\n     * mixins these includes plus... (deep)\n     *\n     * @param mixins {Mixin[] ? []} List of mixins\n     * @return {Array} List of all mixins\n     */\n    flatten : function(mixins)\n    {\n      if (!mixins) {\n        return [];\n      }\n\n      // we need to create a copy and not to modify the existing array\n      var list = mixins.concat();\n\n      for (var i=0, l=mixins.length; i<l; i++)\n      {\n        if (mixins[i].$$includes) {\n          list.push.apply(list, this.flatten(mixins[i].$$includes));\n        }\n      }\n\n      return list;\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE/INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method will be attached to all mixins to return\n     * a nice identifier for them.\n     *\n     * @internal\n     * @return {String} The mixin identifier\n     */\n    genericToString : function() {\n      return \"[Mixin \" + this.name + \"]\";\n    },\n\n\n    /** Registers all defined mixins */\n    $$registry : {},\n\n\n    /** @type {Map} allowed keys in mixin definition */\n    __allowedKeys : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\":\n      {\n        \"include\"    : \"object\",   // Mixin | Mixin[]\n        \"statics\"    : \"object\",   // Map\n        \"members\"    : \"object\",   // Map\n        \"properties\" : \"object\",   // Map\n        \"events\"     : \"object\",   // Map\n        \"destruct\"   : \"function\", // Function\n        \"construct\"  : \"function\"  // Function\n      },\n\n      \"default\" : null\n    }),\n\n\n    /**\n     * Validates incoming configuration and checks keys and values\n     *\n     * @signature function(name, config)\n     * @param name {String} The name of the class\n     * @param config {Map} Configuration map\n     */\n    __validateConfig : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\": function(name, config)\n      {\n        // Validate keys\n        var allowed = this.__allowedKeys;\n        for (var key in config)\n        {\n          if (!allowed[key]) {\n            throw new Error('The configuration key \"' + key + '\" in mixin \"' + name + '\" is not allowed!');\n          }\n\n          if (config[key] == null) {\n            throw new Error('Invalid key \"' + key + '\" in mixin \"' + name + '\"! The value is undefined/null!');\n          }\n\n          if (allowed[key] !== null && typeof config[key] !== allowed[key]) {\n            throw new Error('Invalid type of key \"' + key + '\" in mixin \"' + name + '\"! The type of the key must be \"' + allowed[key] + '\"!');\n          }\n        }\n\n        // Validate maps\n        var maps = [ \"statics\", \"members\", \"properties\", \"events\" ];\n        for (var i=0, l=maps.length; i<l; i++)\n        {\n          var key = maps[i];\n\n          if (config[key] !== undefined &&\n              ([\n                 \"Array\",\n                 \"RegExp\",\n                 \"Date\"\n               ].indexOf(qx.Bootstrap.getClass(config[key])) != -1 ||\n               config[key].classname !== undefined)) {\n\n            throw new Error('Invalid key \"' + key + '\" in mixin \"' + name + '\"! The value needs to be a map!');\n          }\n        }\n\n        // Validate includes\n        if (config.include)\n        {\n          for (var i=0, a=config.include, l=a.length; i<l; i++)\n          {\n            if (a[i] == null) {\n              throw new Error(\"Includes of mixins must be mixins. The include number '\" + (i+1) + \"' in mixin '\" + name + \"'is undefined/null!\");\n            }\n\n            if (a[i].$$type !== \"Mixin\") {\n              throw new Error(\"Includes of mixins must be mixins. The include number '\" + (i+1) + \"' in mixin '\" + name + \"'is not a mixin!\");\n            }\n          }\n\n          this.checkCompatibility(config.include);\n        }\n      },\n\n      \"default\" : function(name, config) {}\n    })\n  }\n});\n"
  ]
}