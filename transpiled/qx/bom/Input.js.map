{
  "version": 3,
  "sources": [
    "Input.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__types",
    "text",
    "textarea",
    "select",
    "checkbox",
    "radio",
    "password",
    "hidden",
    "submit",
    "image",
    "file",
    "search",
    "reset",
    "button",
    "create",
    "type",
    "attributes",
    "win",
    "core",
    "Environment",
    "get",
    "Assert",
    "assertKeyInMap",
    "lang",
    "Object",
    "clone",
    "tag",
    "dom",
    "Element",
    "setValue",
    "element",
    "value",
    "nodeName",
    "toLowerCase",
    "Type",
    "isArray",
    "checked",
    "includes",
    "options",
    "subel",
    "subval",
    "i",
    "l",
    "length",
    "getAttribute",
    "selected",
    "selectedIndex",
    "$$inValueSet",
    "getValue",
    "specified",
    "index",
    "values",
    "one",
    "clazz",
    "bom",
    "Input",
    "max",
    "option",
    "push",
    "replace",
    "setWrap",
    "wrap",
    "wrapValue",
    "styleValue",
    "style",
    "overflowY",
    "setAttribute",
    "overflow",
    "whiteSpace"
  ],
  "mappings": "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",
  "file": "Input.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * jQuery\n     http://jquery.com\n     Version 1.3.1\n\n     Copyright:\n       2009 John Resig\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n************************************************************************ */\n\n/**\n * Cross browser abstractions to work with input elements.\n */\nqx.Bootstrap.define(\"qx.bom.Input\",\n{\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Map} Internal data structures with all supported input types */\n    __types :\n    {\n      text : 1,\n      textarea : 1,\n      select : 1,\n      checkbox : 1,\n      radio : 1,\n      password : 1,\n      hidden : 1,\n      submit : 1,\n      image : 1,\n      file : 1,\n      search : 1,\n      reset : 1,\n      button : 1\n    },\n\n\n    /**\n     * Creates an DOM input/textarea/select element.\n     *\n     * Attributes may be given directly with this call. This is critical\n     * for some attributes e.g. name, type, ... in many clients.\n     *\n     * Note: <code>select</code> and <code>textarea</code> elements are created\n     * using the identically named <code>type</code>.\n     *\n     * @param type {String} Any valid type for HTML, <code>select</code>\n     *   and <code>textarea</code>\n     * @param attributes {Map} Map of attributes to apply\n     * @param win {Window} Window to create the element for\n     * @return {Element} The created input node\n     */\n    create : function(type, attributes, win)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertKeyInMap(type, this.__types, \"Unsupported input type.\");\n      }\n\n      // Work on a copy to not modify given attributes map\n      var attributes = attributes ? qx.lang.Object.clone(attributes) : {};\n\n      var tag;\n\n      if (type === \"textarea\" || type === \"select\")\n      {\n        tag = type;\n      }\n      else\n      {\n        tag = \"input\";\n        attributes.type = type;\n      }\n\n      return qx.dom.Element.create(tag, attributes, win);\n    },\n\n\n    /**\n     * Applies the given value to the element.\n     *\n     * Normally the value is given as a string/number value and applied\n     * to the field content (textfield, textarea) or used to\n     * detect whether the field is checked (checkbox, radiobutton).\n     *\n     * Supports array values for selectboxes (multiple-selection)\n     * and checkboxes or radiobuttons (for convenience).\n     *\n     * Please note: To modify the value attribute of a checkbox or\n     * radiobutton use {@link qx.bom.element.Attribute#set} instead.\n     *\n     * @param element {Element} element to update\n     * @param value {String|Number|Array} the value to apply\n     */\n    setValue : function(element, value)\n    {\n      var tag = element.nodeName.toLowerCase();\n      var type = element.type;\n      var Type = qx.lang.Type;\n\n      if (typeof value === \"number\") {\n        value += \"\";\n      }\n\n      if ((type === \"checkbox\" || type === \"radio\"))\n      {\n        if (Type.isArray(value)) {\n          element.checked = value.includes(element.value);\n        } else {\n          element.checked = element.value == value;\n        }\n      }\n      else if (tag === \"select\")\n      {\n        var isArray = Type.isArray(value);\n        var options = element.options;\n        var subel, subval;\n\n        for (var i=0, l=options.length; i<l; i++)\n        {\n          subel = options[i];\n          subval = subel.getAttribute(\"value\");\n          if (subval == null) {\n            subval = subel.text;\n          }\n\n          subel.selected = isArray ?\n            value.includes(subval) : value == subval;\n        }\n\n        if (isArray && value.length == 0) {\n          element.selectedIndex = -1;\n        }\n      }\n      else if ((type === \"text\" || type === \"textarea\") &&\n        (qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n      {\n        // These flags are required to detect self-made property-change\n        // events during value modification. They are used by the Input\n        // event handler to filter events.\n        element.$$inValueSet = true;\n        element.value = value;\n        element.$$inValueSet = null;\n      } else {\n        element.value = value;\n      }\n    },\n\n\n    /**\n     * Returns the currently configured value.\n     *\n     * Works with simple input fields as well as with\n     * select boxes or option elements.\n     *\n     * Returns an array in cases of multi-selection in\n     * select boxes but in all other cases a string.\n     *\n     * @param element {Element} DOM element to query\n     * @return {String|Array} The value of the given element\n     */\n    getValue : function(element)\n    {\n      var tag = element.nodeName.toLowerCase();\n\n      if (tag === \"option\") {\n        return (element.attributes.value || {}).specified ? element.value : element.text;\n      }\n\n      if (tag === \"select\")\n      {\n        var index = element.selectedIndex;\n\n        // Nothing was selected\n        if (index < 0) {\n          return null;\n        }\n\n        var values = [];\n        var options = element.options;\n        var one = element.type == \"select-one\";\n        var clazz = qx.bom.Input;\n        var value;\n\n        // Loop through all the selected options\n        for (var i=one ? index : 0, max=one ? index+1 : options.length; i<max; i++)\n        {\n          var option = options[i];\n\n          if (option.selected)\n          {\n            // Get the specific value for the option\n            value = clazz.getValue(option);\n\n            // We don't need an array for one selects\n            if (one) {\n              return value;\n            }\n\n            // Multi-Selects return an array\n            values.push(value);\n          }\n        }\n\n        return values;\n      }\n      else\n      {\n        return (element.value || \"\").replace(/\\r/g, \"\");\n      }\n    },\n\n\n    /**\n     * Sets the text wrap behaviour of a text area element.\n     * This property uses the attribute \"wrap\" respectively\n     * the style property \"whiteSpace\"\n     *\n     * @signature function(element, wrap)\n     * @param element {Element} DOM element to modify\n     * @param wrap {Boolean} Whether to turn text wrap on or off.\n     */\n    setWrap : qx.core.Environment.select(\"engine.name\",\n    {\n      \"mshtml\" : function(element, wrap) {\n        var wrapValue = wrap ? \"soft\" : \"off\";\n\n        // Explicitly set overflow-y CSS property to auto when wrapped,\n        // allowing the vertical scroll-bar to appear if necessary\n        var styleValue = wrap ? \"auto\" : \"\";\n\n        element.wrap = wrapValue;\n        element.style.overflowY = styleValue;\n      },\n\n      \"gecko\" : function(element, wrap)\n      {\n        var wrapValue = wrap ? \"soft\" : \"off\";\n        var styleValue = wrap ? \"\" : \"auto\";\n\n        element.setAttribute(\"wrap\", wrapValue);\n        element.style.overflow = styleValue;\n      },\n\n      \"webkit\" : function(element, wrap)\n      {\n        var wrapValue = wrap ? \"soft\" : \"off\";\n        var styleValue = wrap ? \"\" : \"auto\";\n\n        element.setAttribute(\"wrap\", wrapValue);\n        element.style.overflow = styleValue;\n      },\n\n      \"default\" : function(element, wrap) {\n        element.style.whiteSpace = wrap ? \"normal\" : \"nowrap\";\n      }\n    })\n  }\n});\n"
  ]
}